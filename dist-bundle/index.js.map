{"version":3,"sources":["../node_modules/loglevel/lib/loglevel.js","../src/core/logging.ts","../src/core/context.ts","../node_modules/twgl.js/dist/5.x/twgl-full.module.js","../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/mat4.js","../src/core/gl.ts","../src/models/cache.ts","../src/render/light.ts","../src/render/camera.ts","../src/models/instance.ts","../src/models/primitive.ts","../shaders/phong/glsl.frag","../shaders/phong/glsl.vert","../shaders/gouraud/glsl.frag","../shaders/gouraud/glsl.vert","../shaders/gouraud-flat/glsl.frag","../shaders/gouraud-flat/glsl.vert","../package.json","../src/render/material.ts","../src/models/model.ts","../src/parsers/mtl-parser.ts","../src/parsers/obj-parser.ts","../src/utils/files.ts"],"sourcesContent":["/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","// ===== logging.ts ===========================================================\n// Just a wrapper around loglevel\n// Ben Coleman, 2023\n// ============================================================================\n\nimport log from 'loglevel'\n\n/**\n * Wrapper around loglevel, so we can globally change the logging level\n * @param level - The log level to set, one of 'trace', 'debug', 'info', 'warn', 'error', 'silent'\n */\nexport function setLogLevel(level: log.LogLevelNames) {\n  log.setLevel(level)\n}\n","// ===== context.ts ===========================================================\n// Main rendering context, guts of the library\n// Ben Coleman, 2023\n// ============================================================================\n\nimport log from 'loglevel'\nimport { ProgramInfo, createProgramInfo, resizeCanvasToDisplaySize } from 'twgl.js'\nimport { mat4 } from 'gl-matrix'\n\nimport { getGl } from './gl.ts'\nimport { UniformSet } from './types.ts'\nimport { ModelCache } from '../models/cache.ts'\nimport { Light } from '../render/light.ts'\nimport { Camera, CameraType } from '../render/camera.ts'\nimport { Material } from '../render/material.ts'\nimport { Instance } from '../models/instance.ts'\nimport { PrimitiveCube, PrimitivePlane, PrimitiveSphere } from '../models/primitive.ts'\n\n// Import shaders, tsup will inline these as text strings\nimport fragShaderPhong from '../../shaders/phong/glsl.frag'\nimport vertShaderPhong from '../../shaders/phong/glsl.vert'\nimport fragShaderGouraud from '../../shaders/gouraud/glsl.frag'\nimport vertShaderGouraud from '../../shaders/gouraud/glsl.vert'\nimport fragShaderFlat from '../../shaders/gouraud-flat/glsl.frag'\nimport vertShaderFlat from '../../shaders/gouraud-flat/glsl.vert'\n\nimport { version } from '../../package.json'\n\n/**\n * The set of supported shader programs that can be used\n */\nexport enum ShaderProgram {\n  PHONG = 'phong',\n  GOURAUD = 'gouraud',\n  GOURAUD_FLAT = 'gouraud-flat',\n}\n\n/**\n * The main rendering context. This is the effectively main entry point for the library.\n * Typically you will create a single instance of this class using init() and use it to render your scene.\n */\nexport class Context {\n  private gl: WebGL2RenderingContext\n  private aspectRatio = 1\n  private programs: { [key: string]: ProgramInfo } = {}\n  private started = false\n  private instances: Instance[] = []\n  private lights: Light[] = []\n  private prevTime: number\n  private totalTime: number\n\n  /** Main camera for this context */\n  public readonly camera: Camera\n\n  /** Cache of models, used to create instances */\n  public readonly models: ModelCache\n\n  /** If the canvas can be resized, set this to true, otherwise it's an optimization to set to false */\n  public resizeable = true\n\n  /** Show extra debug details on the canvas */\n  public debug = false\n\n  /** The pre-render update hook function */\n  public update: (delta: number) => void\n\n  /** The level & colour of ambient light */\n  public ambientLight: [number, number, number] = [0.05, 0.05, 0.05]\n\n  /** The shader program to use for rendering */\n  public shaderProgram = ShaderProgram.PHONG\n\n  /**\n   * Constructor is private, use init() to create a new context\n   */\n  private constructor(gl: WebGL2RenderingContext) {\n    this.gl = gl\n    this.models = new ModelCache()\n    this.prevTime = 0\n    this.totalTime = 0\n\n    // Default light\n    const light = new Light()\n    light.position = [0, 40, 50]\n    light.colour = [1, 1, 1]\n    this.lights[0] = light\n\n    this.camera = new Camera(CameraType.PERSPECTIVE)\n\n    this.update = () => {\n      // Placeholder empty update function\n    }\n\n    log.info(`👑 GSOTS-3D context created, v${version}`)\n  }\n\n  /**\n   * Create & initialize a new Context which will render into provided canvas selector\n   */\n  static async init(canvasSelector: string, backgroundColour = '#000'): Promise<Context> {\n    const gl = getGl(true, canvasSelector)\n\n    if (!gl) {\n      log.error('💥 Failed to get WebGL context')\n      throw new Error('Failed to get WebGL context')\n    }\n\n    const ctx = new Context(gl)\n\n    const canvas = <HTMLCanvasElement>gl.canvas\n    ctx.aspectRatio = canvas.clientWidth / canvas.clientHeight\n    canvas.style.backgroundColor = backgroundColour\n\n    try {\n      const phongProg = createProgramInfo(gl, [vertShaderPhong, fragShaderPhong])\n      ctx.programs[ShaderProgram.PHONG] = phongProg\n\n      const gouraudProg = createProgramInfo(gl, [vertShaderGouraud, fragShaderGouraud])\n      ctx.programs[ShaderProgram.GOURAUD] = gouraudProg\n\n      const flatProg = createProgramInfo(gl, [vertShaderFlat, fragShaderFlat])\n      ctx.programs[ShaderProgram.GOURAUD_FLAT] = flatProg\n\n      log.info('🎨 Loaded all shaders & programs, GL is ready')\n    } catch (err) {\n      log.error(err)\n      throw err\n    }\n\n    gl.enable(gl.DEPTH_TEST)\n    gl.enable(gl.CULL_FACE)\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\n    // bind to the render function\n    ctx.render = ctx.render.bind(ctx)\n\n    return ctx\n  }\n\n  /**\n   * Main render loop, called every frame\n   */\n  private async render(now: number) {\n    if (!this.gl) return\n\n    now *= 0.001\n    const deltaTime = now - this.prevTime // Get smoothed time difference\n    this.prevTime = now\n    this.totalTime += deltaTime\n\n    // Call the external update function\n    this.update(deltaTime)\n\n    const uniforms = {\n      u_worldInverseTranspose: mat4.create(),\n      u_worldViewProjection: mat4.create(),\n      u_ambientLight: [...this.ambientLight, 1],\n    } as UniformSet\n\n    const shaderProg = this.programs[this.shaderProgram]\n\n    if (this.resizeable) {\n      resizeCanvasToDisplaySize(<HTMLCanvasElement>this.gl.canvas)\n      this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height)\n      this.aspectRatio = this.gl.canvas.width / this.gl.canvas.height\n    }\n\n    // Do this in every frame since camera can move\n    const camMatrix = this.camera.matrix\n    const viewMatrix = mat4.invert(mat4.create(), camMatrix)\n\n    // Forward view matrix, only for specular lighting\n    uniforms.u_camMatrix = camMatrix\n\n    // Calculate view projection matrix\n    const projection = this.camera.projectionMatrix(this.aspectRatio)\n    const viewProjection = mat4.multiply(mat4.create(), projection, viewMatrix)\n\n    // this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT)\n    this.gl.useProgram(shaderProg.program)\n\n    // Since we only have one light, just apply it here\n    this.lights[0].apply(shaderProg)\n\n    // Draw all instances\n    for (const instance of this.instances) {\n      instance.render(this.gl, uniforms, viewProjection, shaderProg)\n    }\n\n    // Loop forever or not\n    if (this.started) requestAnimationFrame(this.render)\n  }\n\n  /**\n   * Get the default light\n   */\n  get defaultLight() {\n    return this.lights[0]\n  }\n\n  /**\n   * Start the rendering loop\n   */\n  start() {\n    this.started = true\n    requestAnimationFrame(this.render)\n  }\n\n  /**\n   * Stop the rendering loop\n   */\n  stop() {\n    this.started = false\n  }\n\n  /**\n   * Create a new model instance, which should have been previously loaded into the cache\n   * @param modelName - Name of the model previously loaded into the cache\n   */\n  createModelInstance(modelName: string) {\n    const model = this.models.get(modelName)\n    if (!model) throw new Error(`💥 Model ${modelName} not found`)\n\n    const instance = new Instance(model)\n    this.instances.push(instance)\n\n    return instance\n  }\n\n  /**\n   * Create an instance of a primitive sphere\n   */\n  createSphereInstance(material: Material, radius = 5, subdivisionsH = 16, subdivisionsV = 8) {\n    const sphere = new PrimitiveSphere(this.gl, radius, subdivisionsH, subdivisionsV)\n    sphere.material = material\n\n    const instance = new Instance(sphere)\n    this.instances.push(instance)\n\n    log.debug(`🟢 Created sphere instance, r:${radius}`)\n\n    return instance\n  }\n\n  /**\n   * Create an instance of a primitive plane\n   */\n  createPlaneInstance(material: Material, width = 5, height = 5, subdivisionsW = 1, subdivisionsH = 1) {\n    const plane = new PrimitivePlane(this.gl, width, height, subdivisionsW, subdivisionsH)\n    plane.material = material\n\n    const instance = new Instance(plane)\n    this.instances.push(instance)\n\n    log.debug(`🟨 Created plane instance, w:${width} h:${height}`)\n\n    return instance\n  }\n\n  /**\n   * Create an instance of a primitive cube\n   */\n  createCubeInstance(material: Material, size = 5) {\n    const cube = new PrimitiveCube(this.gl, size)\n    cube.material = material\n\n    const instance = new Instance(cube)\n    this.instances.push(instance)\n\n    log.debug(`📦 Created cube instance, size:${size}`)\n\n    return instance\n  }\n}\n","/* @license twgl.js 5.3.1 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\nAvailable via the MIT license.\nsee: http://github.com/greggman/twgl.js for details */\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */\n\nlet VecType = Float32Array;\n\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */\n\n/**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */\nfunction setDefaultType$1(ctor) {\n  const oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @param {number} [x] Initial x value.\n * @param {number} [y] Initial y value.\n * @param {number} [z] Initial z value.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\nfunction create$1(x, y, z) {\n  const dst = new VecType(3);\n  if (x) {\n    dst[0] = x;\n  }\n  if (y) {\n    dst[1] = y;\n  }\n  if (z) {\n    dst[2] = z;\n  }\n  return dst;\n}\n\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.\n * @memberOf module:twgl/v3\n */\nfunction add(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n\n  return dst;\n}\n\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.\n * @memberOf module:twgl/v3\n */\nfunction subtract(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerp(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} the linear interpolated result.\n * @memberOf module:twgl/v3\n */\nfunction lerpV(a, b, t, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n\n  return dst;\n}\n\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The max components vector.\n * @memberOf module:twgl/v3\n */\nfunction max(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The min components vector.\n * @memberOf module:twgl/v3\n */\nfunction min(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction mulScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n\n  return dst;\n}\n\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The scaled vector.\n * @memberOf module:twgl/v3\n */\nfunction divScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n\n  return dst;\n}\n\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of a cross b.\n * @memberOf module:twgl/v3\n */\nfunction cross(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  const t1 = a[2] * b[0] - a[0] * b[2];\n  const t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n\n  return dst;\n}\n\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */\nfunction dot(a, b) {\n  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n}\n\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */\nfunction length$1(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distance(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */\nfunction distanceSq(a, b) {\n  const dx = a[0] - b[0];\n  const dy = a[1] - b[1];\n  const dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */\nfunction normalize(a, dst) {\n  dst = dst || new VecType(3);\n\n  const lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n  const len = Math.sqrt(lenSq);\n  if (len > 0.00001) {\n    dst[0] = a[0] / len;\n    dst[1] = a[1] / len;\n    dst[2] = a[2] / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return dst;\n}\n\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */\nfunction negate$1(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n\n  return dst;\n}\n\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */\nfunction copy$1(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n\n  return dst;\n}\n\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction multiply$1(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n\n  return dst;\n}\n\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\nfunction divide(a, b, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n\n  return dst;\n}\n\nvar v3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  add: add,\n  copy: copy$1,\n  create: create$1,\n  cross: cross,\n  distance: distance,\n  distanceSq: distanceSq,\n  divide: divide,\n  divScalar: divScalar,\n  dot: dot,\n  lerp: lerp,\n  lerpV: lerpV,\n  length: length$1,\n  lengthSq: lengthSq,\n  max: max,\n  min: min,\n  mulScalar: mulScalar,\n  multiply: multiply$1,\n  negate: negate$1,\n  normalize: normalize,\n  setDefaultType: setDefaultType$1,\n  subtract: subtract\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */\nlet MatType = Float32Array;\n\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */\nfunction setDefaultType(ctor) {\n  const oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */\nfunction negate(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = -m[ 0];\n  dst[ 1] = -m[ 1];\n  dst[ 2] = -m[ 2];\n  dst[ 3] = -m[ 3];\n  dst[ 4] = -m[ 4];\n  dst[ 5] = -m[ 5];\n  dst[ 6] = -m[ 6];\n  dst[ 7] = -m[ 7];\n  dst[ 8] = -m[ 8];\n  dst[ 9] = -m[ 9];\n  dst[10] = -m[10];\n  dst[11] = -m[11];\n  dst[12] = -m[12];\n  dst[13] = -m[13];\n  dst[14] = -m[14];\n  dst[15] = -m[15];\n\n  return dst;\n}\n\n/**\n * Creates a matrix.\n * @return {module:twgl/m4.Mat4} A new matrix.\n * @memberOf module:twgl/m4\n */\nfunction create() {\n  return new MatType(16).fill(0);\n}\n\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */\nfunction copy(m, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = m[ 0];\n  dst[ 1] = m[ 1];\n  dst[ 2] = m[ 2];\n  dst[ 3] = m[ 3];\n  dst[ 4] = m[ 4];\n  dst[ 5] = m[ 5];\n  dst[ 6] = m[ 6];\n  dst[ 7] = m[ 7];\n  dst[ 8] = m[ 8];\n  dst[ 9] = m[ 9];\n  dst[10] = m[10];\n  dst[11] = m[11];\n  dst[12] = m[12];\n  dst[13] = m[13];\n  dst[14] = m[14];\n  dst[15] = m[15];\n\n  return dst;\n}\n\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */\n function transpose(m, dst) {\n  dst = dst || new MatType(16);\n  if (dst === m) {\n    let t;\n\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  dst[ 0] = m00;\n  dst[ 1] = m10;\n  dst[ 2] = m20;\n  dst[ 3] = m30;\n  dst[ 4] = m01;\n  dst[ 5] = m11;\n  dst[ 6] = m21;\n  dst[ 7] = m31;\n  dst[ 8] = m02;\n  dst[ 9] = m12;\n  dst[10] = m22;\n  dst[11] = m32;\n  dst[12] = m03;\n  dst[13] = m13;\n  dst[14] = m23;\n  dst[15] = m33;\n\n  return dst;\n}\n\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n  const tmp_0  = m22 * m33;\n  const tmp_1  = m32 * m23;\n  const tmp_2  = m12 * m33;\n  const tmp_3  = m32 * m13;\n  const tmp_4  = m12 * m23;\n  const tmp_5  = m22 * m13;\n  const tmp_6  = m02 * m33;\n  const tmp_7  = m32 * m03;\n  const tmp_8  = m02 * m23;\n  const tmp_9  = m22 * m03;\n  const tmp_10 = m02 * m13;\n  const tmp_11 = m12 * m03;\n  const tmp_12 = m20 * m31;\n  const tmp_13 = m30 * m21;\n  const tmp_14 = m10 * m31;\n  const tmp_15 = m30 * m11;\n  const tmp_16 = m10 * m21;\n  const tmp_17 = m20 * m11;\n  const tmp_18 = m00 * m31;\n  const tmp_19 = m30 * m01;\n  const tmp_20 = m00 * m21;\n  const tmp_21 = m20 * m01;\n  const tmp_22 = m00 * m11;\n  const tmp_23 = m10 * m01;\n\n  const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -\n      (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -\n      (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -\n      (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -\n      (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n\n  const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n\n  dst[ 0] = d * t0;\n  dst[ 1] = d * t1;\n  dst[ 2] = d * t2;\n  dst[ 3] = d * t3;\n  dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -\n          (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -\n          (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -\n          (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -\n          (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -\n          (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -\n          (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -\n          (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -\n          (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -\n          (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -\n          (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -\n          (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -\n          (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n\n  return dst;\n}\n\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */\nfunction multiply(a, b, dst) {\n  dst = dst || new MatType(16);\n\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[ 4 + 0];\n  const a11 = a[ 4 + 1];\n  const a12 = a[ 4 + 2];\n  const a13 = a[ 4 + 3];\n  const a20 = a[ 8 + 0];\n  const a21 = a[ 8 + 1];\n  const a22 = a[ 8 + 2];\n  const a23 = a[ 8 + 3];\n  const a30 = a[12 + 0];\n  const a31 = a[12 + 1];\n  const a32 = a[12 + 2];\n  const a33 = a[12 + 3];\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b03 = b[3];\n  const b10 = b[ 4 + 0];\n  const b11 = b[ 4 + 1];\n  const b12 = b[ 4 + 2];\n  const b13 = b[ 4 + 3];\n  const b20 = b[ 8 + 0];\n  const b21 = b[ 8 + 1];\n  const b22 = b[ 8 + 2];\n  const b23 = b[ 8 + 3];\n  const b30 = b[12 + 0];\n  const b31 = b[12 + 1];\n  const b32 = b[12 + 2];\n  const b33 = b[12 + 3];\n\n  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n\n  return dst;\n}\n\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with translation set.\n * @memberOf module:twgl/m4\n */\nfunction setTranslation(a, v, dst) {\n  dst = dst || identity();\n  if (a !== dst) {\n    dst[ 0] = a[ 0];\n    dst[ 1] = a[ 1];\n    dst[ 2] = a[ 2];\n    dst[ 3] = a[ 3];\n    dst[ 4] = a[ 4];\n    dst[ 5] = a[ 5];\n    dst[ 6] = a[ 6];\n    dst[ 7] = a[ 7];\n    dst[ 8] = a[ 8];\n    dst[ 9] = a[ 9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */\nfunction getTranslation(m, dst) {\n  dst = dst || create$1();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */\nfunction getAxis(m, axis, dst) {\n  dst = dst || create$1();\n  const off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The matrix with axis set.\n * @memberOf module:twgl/m4\n */\nfunction setAxis(a, v, axis, dst) {\n  if (dst !== a) {\n    dst = copy(a, dst);\n  }\n  const off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n  dst = dst || new MatType(16);\n\n  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n  const rangeInv = 1.0 / (zNear - zFar);\n\n  dst[0]  = f / aspect;\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = f;\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = (zNear + zFar) * rangeInv;\n  dst[11] = -1;\n\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = zNear * zFar * rangeInv * 2;\n  dst[15] = 0;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 orthogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\nfunction ortho(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  dst[0]  = 2 / (right - left);\n  dst[1]  = 0;\n  dst[2]  = 0;\n  dst[3]  = 0;\n\n  dst[4]  = 0;\n  dst[5]  = 2 / (top - bottom);\n  dst[6]  = 0;\n  dst[7]  = 0;\n\n  dst[8]  = 0;\n  dst[9]  = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = (far + near) / (near - far);\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n\n  const dx = (right - left);\n  const dy = (top - bottom);\n  const dz = (near - far);\n\n  dst[ 0] = 2 * near / dx;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 2 * near / dy;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = (left + right) / dx;\n  dst[ 9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n\n  return dst;\n}\n\nlet xAxis;\nlet yAxis;\nlet zAxis;\n\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */\nfunction lookAt(eye, target, up, dst) {\n  dst = dst || new MatType(16);\n\n  xAxis = xAxis || create$1();\n  yAxis = yAxis || create$1();\n  zAxis = zAxis || create$1();\n\n  normalize(\n      subtract(eye, target, zAxis), zAxis);\n  normalize(cross(up, zAxis, xAxis), xAxis);\n  normalize(cross(zAxis, xAxis, yAxis), yAxis);\n\n  dst[ 0] = xAxis[0];\n  dst[ 1] = xAxis[1];\n  dst[ 2] = xAxis[2];\n  dst[ 3] = 0;\n  dst[ 4] = yAxis[0];\n  dst[ 5] = yAxis[1];\n  dst[ 6] = yAxis[2];\n  dst[ 7] = 0;\n  dst[ 8] = zAxis[0];\n  dst[ 9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = eye[0];\n  dst[13] = eye[1];\n  dst[14] = eye[2];\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */\nfunction translation(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n\n/**\n * Translates the given 4-by-4 matrix by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The translated matrix.\n * @memberOf module:twgl/m4\n */\nfunction translate(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const m30 = m[3 * 4 + 0];\n  const m31 = m[3 * 4 + 1];\n  const m32 = m[3 * 4 + 2];\n  const m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[ 0] = m00;\n    dst[ 1] = m01;\n    dst[ 2] = m02;\n    dst[ 3] = m03;\n    dst[ 4] = m10;\n    dst[ 5] = m11;\n    dst[ 6] = m12;\n    dst[ 7] = m13;\n    dst[ 8] = m20;\n    dst[ 9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationX(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = 1;\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = c;\n  dst[ 6] = s;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateX(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[4]  = c * m10 + s * m20;\n  dst[5]  = c * m11 + s * m21;\n  dst[6]  = c * m12 + s * m22;\n  dst[7]  = c * m13 + s * m23;\n  dst[8]  = c * m20 - s * m10;\n  dst[9]  = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[ 0] = m[ 0];\n    dst[ 1] = m[ 1];\n    dst[ 2] = m[ 2];\n    dst[ 3] = m[ 3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationY(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = 0;\n  dst[ 2] = -s;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = 1;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = s;\n  dst[ 9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateY(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m20 = m[2 * 4 + 0];\n  const m21 = m[2 * 4 + 1];\n  const m22 = m[2 * 4 + 2];\n  const m23 = m[2 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 - s * m20;\n  dst[ 1] = c * m01 - s * m21;\n  dst[ 2] = c * m02 - s * m22;\n  dst[ 3] = c * m03 - s * m23;\n  dst[ 8] = c * m20 + s * m00;\n  dst[ 9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[ 4] = m[ 4];\n    dst[ 5] = m[ 5];\n    dst[ 6] = m[ 6];\n    dst[ 7] = m[ 7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotationZ(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c;\n  dst[ 1] = s;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = -s;\n  dst[ 5] = c;\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction rotateZ(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  const m00 = m[0 * 4 + 0];\n  const m01 = m[0 * 4 + 1];\n  const m02 = m[0 * 4 + 2];\n  const m03 = m[0 * 4 + 3];\n  const m10 = m[1 * 4 + 0];\n  const m11 = m[1 * 4 + 1];\n  const m12 = m[1 * 4 + 2];\n  const m13 = m[1 * 4 + 3];\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n\n  dst[ 0] = c * m00 + s * m10;\n  dst[ 1] = c * m01 + s * m11;\n  dst[ 2] = c * m02 + s * m12;\n  dst[ 3] = c * m03 + s * m13;\n  dst[ 4] = c * m10 - s * m00;\n  dst[ 5] = c * m11 - s * m01;\n  dst[ 6] = c * m12 - s * m02;\n  dst[ 7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[ 8] = m[ 8];\n    dst[ 9] = m[ 9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  dst[ 0] = xx + (1 - xx) * c;\n  dst[ 1] = x * y * oneMinusCosine + z * s;\n  dst[ 2] = x * z * oneMinusCosine - y * s;\n  dst[ 3] = 0;\n  dst[ 4] = x * y * oneMinusCosine - z * s;\n  dst[ 5] = yy + (1 - yy) * c;\n  dst[ 6] = y * z * oneMinusCosine + x * s;\n  dst[ 7] = 0;\n  dst[ 8] = x * z * oneMinusCosine + y * s;\n  dst[ 9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Rotates the given 4-by-4 matrix around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The rotated matrix.\n * @memberOf module:twgl/m4\n */\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  const n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  const xx = x * x;\n  const yy = y * y;\n  const zz = z * z;\n  const c = Math.cos(angleInRadians);\n  const s = Math.sin(angleInRadians);\n  const oneMinusCosine = 1 - c;\n\n  const r00 = xx + (1 - xx) * c;\n  const r01 = x * y * oneMinusCosine + z * s;\n  const r02 = x * z * oneMinusCosine - y * s;\n  const r10 = x * y * oneMinusCosine - z * s;\n  const r11 = yy + (1 - yy) * c;\n  const r12 = y * z * oneMinusCosine + x * s;\n  const r20 = x * z * oneMinusCosine + y * s;\n  const r21 = y * z * oneMinusCosine - x * s;\n  const r22 = zz + (1 - zz) * c;\n\n  const m00 = m[0];\n  const m01 = m[1];\n  const m02 = m[2];\n  const m03 = m[3];\n  const m10 = m[4];\n  const m11 = m[5];\n  const m12 = m[6];\n  const m13 = m[7];\n  const m20 = m[8];\n  const m21 = m[9];\n  const m22 = m[10];\n  const m23 = m[11];\n\n  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */\nfunction scaling(v, dst) {\n  dst = dst || new MatType(16);\n\n  dst[ 0] = v[0];\n  dst[ 1] = 0;\n  dst[ 2] = 0;\n  dst[ 3] = 0;\n  dst[ 4] = 0;\n  dst[ 5] = v[1];\n  dst[ 6] = 0;\n  dst[ 7] = 0;\n  dst[ 8] = 0;\n  dst[ 9] = 0;\n  dst[10] = v[2];\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n\n  return dst;\n}\n\n/**\n * Scales the given 4-by-4 matrix in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.\n * @return {module:twgl/m4.Mat4} The scaled matrix.\n * @memberOf module:twgl/m4\n */\nfunction scale(m, v, dst) {\n  dst = dst || new MatType(16);\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[ 0] = v0 * m[0 * 4 + 0];\n  dst[ 1] = v0 * m[0 * 4 + 1];\n  dst[ 2] = v0 * m[0 * 4 + 2];\n  dst[ 3] = v0 * m[0 * 4 + 3];\n  dst[ 4] = v1 * m[1 * 4 + 0];\n  dst[ 5] = v1 * m[1 * 4 + 1];\n  dst[ 6] = v1 * m[1 * 4 + 2];\n  dst[ 7] = v1 * m[1 * 4 + 3];\n  dst[ 8] = v2 * m[2 * 4 + 0];\n  dst[ 9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed point.\n * @memberOf module:twgl/m4\n */\nfunction transformPoint(m, v, dst) {\n  dst = dst || create$1();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n  const d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n\n  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */\nfunction transformDirection(m, v, dst) {\n  dst = dst || create$1();\n\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed normal.\n * @memberOf module:twgl/m4\n */\nfunction transformNormal$1(m, v, dst) {\n  dst = dst || create$1();\n  const mi = inverse(m);\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\nvar m4 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  axisRotate: axisRotate,\n  axisRotation: axisRotation,\n  copy: copy,\n  create: create,\n  frustum: frustum,\n  getAxis: getAxis,\n  getTranslation: getTranslation,\n  identity: identity,\n  inverse: inverse,\n  lookAt: lookAt,\n  multiply: multiply,\n  negate: negate,\n  ortho: ortho,\n  perspective: perspective,\n  rotateX: rotateX,\n  rotateY: rotateY,\n  rotateZ: rotateZ,\n  rotationX: rotationX,\n  rotationY: rotationY,\n  rotationZ: rotationZ,\n  scale: scale,\n  scaling: scaling,\n  setAxis: setAxis,\n  setDefaultType: setDefaultType,\n  setTranslation: setTranslation,\n  transformDirection: transformDirection,\n  transformNormal: transformNormal$1,\n  transformPoint: transformPoint,\n  translate: translate,\n  translation: translation,\n  transpose: transpose\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* DataType */\nconst BYTE$2                           = 0x1400;\nconst UNSIGNED_BYTE$3                  = 0x1401;\nconst SHORT$2                          = 0x1402;\nconst UNSIGNED_SHORT$3                 = 0x1403;\nconst INT$3                            = 0x1404;\nconst UNSIGNED_INT$3                   = 0x1405;\nconst FLOAT$3                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5$1         = 0x8363;\nconst HALF_FLOAT$1                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;\nconst UNSIGNED_INT_24_8$1            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE$2]                           = Int8Array;\n  tt[UNSIGNED_BYTE$3]                  = Uint8Array;\n  tt[SHORT$2]                          = Int16Array;\n  tt[UNSIGNED_SHORT$3]                 = Uint16Array;\n  tt[INT$3]                            = Int32Array;\n  tt[UNSIGNED_INT$3]                   = Uint32Array;\n  tt[FLOAT$3]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4$1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1$1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5$1]           = Uint16Array;\n  tt[HALF_FLOAT$1]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV$1]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV$1]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV$1]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV$1] = Uint32Array;\n  tt[UNSIGNED_INT_24_8$1]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE$2; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT$2; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT$3; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT$3; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT$3; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT$3; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE$2; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE$3; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT$2; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT$3; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT$3; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT$3; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT$3; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer$1 = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nvar typedarrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getGLTypeForTypedArray: getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,\n  isArrayBuffer: isArrayBuffer$1\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error$1(...args) {\n  console.error(...args);\n}\n\nfunction warn$1(...args) {\n  console.warn(...args);\n}\n\nconst isTypeWeakMaps = new Map();\n\nfunction isType(object, type) {\n  if (!object || typeof object !== 'object') {\n    return false;\n  }\n  let weakMap = isTypeWeakMaps.get(type);\n  if (!weakMap) {\n    weakMap = new WeakMap();\n    isTypeWeakMaps.set(type, weakMap);\n  }\n  let isOfType = weakMap.get(object);\n  if (isOfType === undefined) {\n    const s = Object.prototype.toString.call(object);\n    isOfType = s.substring(8, s.length - 1) === type;\n    weakMap.set(object, isOfType);\n  }\n  return isOfType;\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && isType(t, 'WebGLBuffer');\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && isType(t, 'WebGLRenderbuffer');\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && isType(t, 'WebGLTexture');\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && isType(t, 'WebGLSampler');\n}\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER$1                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$2         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE$1                         = 0x1400;\nconst UNSIGNED_BYTE$2                = 0x1401;\nconst SHORT$1                        = 0x1402;\nconst UNSIGNED_SHORT$2               = 0x1403;\nconst INT$2                          = 0x1404;\nconst UNSIGNED_INT$2                 = 0x1405;\nconst FLOAT$2                        = 0x1406;\nconst defaults$2 = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults$2.attribPrefix = prefix;\n}\n\nfunction setDefaults$2(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$2);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER$1;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray$1(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents$1(array, arrayName, numValues) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues || getArray$1(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (isArrayBuffer$1(array)) {\n    return array;\n  }\n\n  if (isArrayBuffer$1(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type ? typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type) : undefined;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\nfunction glTypeFromGLTypeOrTypedArrayType(glTypeOrTypedArrayCtor) {\n  return typeof glTypeOrTypedArrayCtor === 'number'\n      ? glTypeOrTypedArrayCtor\n      : glTypeOrTypedArrayCtor ? getGLTypeForTypedArrayType(glTypeOrTypedArrayCtor) : FLOAT$2;\n}\n\nfunction typedArrayTypeFromGLTypeOrTypedArrayCtor(glTypeOrTypedArrayCtor) {\n  return typeof glTypeOrTypedArrayCtor === 'number'\n      ? getTypedArrayTypeForGLType(glTypeOrTypedArrayCtor)\n      : glTypeOrTypedArrayCtor || Float32Array;\n}\n\nfunction attribBufferFromBuffer(gl, array/*, arrayName */) {\n  return {\n    buffer: array.buffer,\n    numValues: 2 * 3 * 4,  // safely divided by 2, 3, 4\n    type: glTypeFromGLTypeOrTypedArrayType(array.type),\n    arrayType: typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type),\n  };\n}\n\nfunction attribBufferFromSize(gl, array/*, arrayName*/) {\n  const numValues = array.data || array;\n  const arrayType = typedArrayTypeFromGLTypeOrTypedArrayCtor(array.type);\n  const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(ARRAY_BUFFER$1, buffer);\n  gl.bufferData(ARRAY_BUFFER$1, numBytes, array.drawType || STATIC_DRAW);\n  return {\n    buffer,\n    numValues,\n    type: getGLTypeForTypedArrayType(arrayType),\n    arrayType,\n  };\n}\n\nfunction attribBufferFromArrayLike(gl, array, arrayName) {\n  const typedArray = makeTypedArray(array, arrayName);\n  return {\n    arrayType: typedArray.constructor,\n    buffer: createBufferFromTypedArray(gl, typedArray, undefined, array.drawType),\n    type: getGLTypeForTypedArray(typedArray),\n    numValues: 0,\n  };\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = 0.\n *    Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *    and, if you're using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {(Int8ArrayConstructor|Uint8ArrayConstructor|Int16ArrayConstructor|Uint16ArrayConstructor|Int32ArrayConstructor|Uint32ArrayConstructor|Float32ArrayConstructor)} TypedArrayConstructor\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} [data] The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {number|TypedArrayConstructor} [type] type. This is used if `data` is a JavaScript array, or `buffer` is passed in, or `data` is a number.\n *   It can either be the constructor for a typedarray. (eg. `Uint8Array`) OR a WebGL type, (eg `gl.UNSIGNED_BYTE`).\n *   For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: gl.UNSIGNED_BYTE, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = 0.\n *     Requires WebGL2 or the ANGLE_instanced_arrays extension.\n *     and, if you using WebGL1 you must have called {@link module:twgl.addExtensionsToContext}\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults$2.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !isArrayBuffer$1(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let fn;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          fn = attribBufferFromBuffer;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          fn = attribBufferFromSize;\n        } else {\n          fn = attribBufferFromArrayLike;\n        }\n        const {buffer, type, numValues, arrayType} = fn(gl, array, arrayName);\n        const normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n        const numComponents = getNumComponents$1(array, arrayName, numValues);\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER$1, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER$1, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER$1, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER$1, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE$1)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE$2)  return 1;  // eslint-disable-line\n  if (type === SHORT$1)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT$2) return 2;  // eslint-disable-line\n  if (type === INT$2)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT$2)   return 4;  // eslint-disable-line\n  if (type === FLOAT$2)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray$1(array).length;\n  if (length === undefined) {\n    return 1;   // There's no arrays\n  }\n  const numComponents = getNumComponents$1(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults$2.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  if (!attrib.buffer) {\n    return 1; // There's no buffer\n  }\n  gl.bindBuffer(ARRAY_BUFFER$1, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER$1, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER$1, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER$2);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER$2 : ARRAY_BUFFER$1;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nvar attributes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttribsFromArrays: createAttribsFromArrays,\n  createBuffersFromArrays: createBuffersFromArrays,\n  createBufferFromArray: createBufferFromArray,\n  createBufferFromTypedArray: createBufferFromTypedArray,\n  createBufferInfoFromArrays: createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,\n  setAttributePrefix: setAttributePrefix,\n  setAttributeDefaults_: setDefaults$2,\n  getNumComponents_: getNumComponents$1,\n  getArray_: getArray$1\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst getArray = getArray$1;  // eslint-disable-line\nconst getNumComponents = getNumComponents$1;  // eslint-disable-line\n\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */\n\n/**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */\nfunction augmentTypedArray(typedArray, numComponents) {\n  let cursor = 0;\n  typedArray.push = function() {\n    for (let ii = 0; ii < arguments.length; ++ii) {\n      const value = arguments[ii];\n      if (value instanceof Array || isArrayBuffer$1(value)) {\n        for (let jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n  typedArray.reset = function(opt_index) {\n    cursor = opt_index || 0;\n  };\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, 'numElements', {\n    get: function() {\n      return this.length / this.numComponents | 0;\n    },\n  });\n  return typedArray;\n}\n\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */\nfunction createAugmentedTypedArray(numComponents, numElements, opt_type) {\n  const Type = opt_type || Float32Array;\n  return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\n\nfunction allButIndices(name) {\n  return name !== \"indices\";\n}\n\n/**\n * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */\nfunction deindexVertices(vertices) {\n  const indices = vertices.indices;\n  const newVertices = {};\n  const numElements = indices.length;\n\n  function expandToUnindexed(channel) {\n    const srcBuffer = vertices[channel];\n    const numComponents = srcBuffer.numComponents;\n    const dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n    for (let ii = 0; ii < numElements; ++ii) {\n      const ndx = indices[ii];\n      const offset = ndx * numComponents;\n      for (let jj = 0; jj < numComponents; ++jj) {\n        dstBuffer.push(srcBuffer[offset + jj]);\n      }\n    }\n    newVertices[channel] = dstBuffer;\n  }\n\n  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n\n  return newVertices;\n}\n\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */\nfunction flattenNormals(vertices) {\n  if (vertices.indices) {\n    throw new Error('can not flatten normals of indexed vertices. deindex them first');\n  }\n\n  const normals = vertices.normal;\n  const numNormals = normals.length;\n  for (let ii = 0; ii < numNormals; ii += 9) {\n    // pull out the 3 normals for this triangle\n    const nax = normals[ii + 0];\n    const nay = normals[ii + 1];\n    const naz = normals[ii + 2];\n\n    const nbx = normals[ii + 3];\n    const nby = normals[ii + 4];\n    const nbz = normals[ii + 5];\n\n    const ncx = normals[ii + 6];\n    const ncy = normals[ii + 7];\n    const ncz = normals[ii + 8];\n\n    // add them\n    let nx = nax + nbx + ncx;\n    let ny = nay + nby + ncy;\n    let nz = naz + nbz + ncz;\n\n    // normalize them\n    const length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n\n    nx /= length;\n    ny /= length;\n    nz /= length;\n\n    // copy them back in\n    normals[ii + 0] = nx;\n    normals[ii + 1] = ny;\n    normals[ii + 2] = nz;\n\n    normals[ii + 3] = nx;\n    normals[ii + 4] = ny;\n    normals[ii + 5] = nz;\n\n    normals[ii + 6] = nx;\n    normals[ii + 7] = ny;\n    normals[ii + 8] = nz;\n  }\n\n  return vertices;\n}\n\nfunction applyFuncToV3Array(array, matrix, fn) {\n  const len = array.length;\n  const tmp = new Float32Array(3);\n  for (let ii = 0; ii < len; ii += 3) {\n    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n    array[ii    ] = tmp[0];\n    array[ii + 1] = tmp[1];\n    array[ii + 2] = tmp[2];\n  }\n}\n\nfunction transformNormal(mi, v, dst) {\n  dst = dst || create$1();\n  const v0 = v[0];\n  const v1 = v[1];\n  const v2 = v[2];\n\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n\n  return dst;\n}\n\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientDirections(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformDirection);\n  return array;\n}\n\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientNormals(array, matrix) {\n  applyFuncToV3Array(array, inverse(matrix), transformNormal);\n  return array;\n}\n\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\nfunction reorientPositions(array, matrix) {\n  applyFuncToV3Array(array, matrix, transformPoint);\n  return array;\n}\n\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */\n\n/**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */\nfunction reorientVertices(arrays, matrix) {\n  Object.keys(arrays).forEach(function(name) {\n    const array = arrays[name];\n    if (name.indexOf(\"pos\") >= 0) {\n      reorientPositions(array, matrix);\n    } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n      reorientDirections(array, matrix);\n    } else if (name.indexOf(\"norm\") >= 0) {\n      reorientNormals(array, matrix);\n    }\n  });\n  return arrays;\n}\n\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */\n\n/**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */\nfunction createXYQuadVertices(size, xOffset, yOffset) {\n  size = size || 2;\n  xOffset = xOffset || 0;\n  yOffset = yOffset || 0;\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [\n        xOffset + -1 * size, yOffset + -1 * size,\n        xOffset +  1 * size, yOffset + -1 * size,\n        xOffset + -1 * size, yOffset +  1 * size,\n        xOffset +  1 * size, yOffset +  1 * size,\n      ],\n    },\n    normal: [\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n      0, 0, 1,\n    ],\n    texcoord: [\n      0, 0,\n      1, 0,\n      0, 1,\n      1, 1,\n    ],\n    indices: [ 0, 1, 2, 2, 1, 3 ],\n  };\n}\n\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */\n\n/**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createPlaneVertices(\n    width,\n    depth,\n    subdivisionsWidth,\n    subdivisionsDepth,\n    matrix) {\n  width = width || 1;\n  depth = depth || 1;\n  subdivisionsWidth = subdivisionsWidth || 1;\n  subdivisionsDepth = subdivisionsDepth || 1;\n  matrix = matrix || identity();\n\n  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  for (let z = 0; z <= subdivisionsDepth; z++) {\n    for (let x = 0; x <= subdivisionsWidth; x++) {\n      const u = x / subdivisionsWidth;\n      const v = z / subdivisionsDepth;\n      positions.push(\n          width * u - width * 0.5,\n          0,\n          depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  const numVertsAcross = subdivisionsWidth + 1;\n  const indices = createAugmentedTypedArray(\n      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line\n    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (z + 0) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x,\n          (z + 0) * numVertsAcross + x + 1);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (z + 1) * numVertsAcross + x,\n          (z + 1) * numVertsAcross + x + 1,\n          (z + 0) * numVertsAcross + x + 1);\n    }\n  }\n\n  const arrays = reorientVertices({\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  }, matrix);\n  return arrays;\n}\n\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */\n\n/**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createSphereVertices(\n    radius,\n    subdivisionsAxis,\n    subdivisionsHeight,\n    opt_startLatitudeInRadians,\n    opt_endLatitudeInRadians,\n    opt_startLongitudeInRadians,\n    opt_endLongitudeInRadians) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n  opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);\n\n  const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n  const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;\n\n  // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let y = 0; y <= subdivisionsHeight; y++) {\n    for (let x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      const u = x / subdivisionsAxis;\n      const v = y / subdivisionsHeight;\n      const theta = longRange * u + opt_startLongitudeInRadians;\n      const phi = latRange * v + opt_startLatitudeInRadians;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  const numVertsAround = subdivisionsAxis + 1;\n  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line\n    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push(\n          (y + 0) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          (y + 1) * numVertsAround + x,\n          (y + 0) * numVertsAround + x + 1,\n          (y + 1) * numVertsAround + x + 1);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */\nconst CUBE_FACE_INDICES = [\n  [3, 7, 5, 1],  // right\n  [6, 2, 0, 4],  // left\n  [6, 7, 3, 2],  // ??\n  [0, 1, 5, 4],  // ??\n  [7, 6, 4, 5],  // front\n  [2, 3, 1, 0],  // back\n];\n\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */\n\n/**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createCubeVertices(size) {\n  size = size || 1;\n  const k = size / 2;\n\n  const cornerVertices = [\n    [-k, -k, -k],\n    [+k, -k, -k],\n    [-k, +k, -k],\n    [+k, +k, -k],\n    [-k, -k, +k],\n    [+k, -k, +k],\n    [-k, +k, +k],\n    [+k, +k, +k],\n  ];\n\n  const faceNormals = [\n    [+1, +0, +0],\n    [-1, +0, +0],\n    [+0, +1, +0],\n    [+0, -1, +0],\n    [+0, +0, +1],\n    [+0, +0, -1],\n  ];\n\n  const uvCoords = [\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [1, 1],\n  ];\n\n  const numVertices = 6 * 4;\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2 , numVertices);\n  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (let f = 0; f < 6; ++f) {\n    const faceIndices = CUBE_FACE_INDICES[f];\n    for (let v = 0; v < 4; ++v) {\n      const position = cornerVertices[faceIndices[v]];\n      const normal = faceNormals[f];\n      const uv = uvCoords[v];\n\n      // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n\n    }\n    // Two triangles make a square face.\n    const offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */\n\n/**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTruncatedConeVertices(\n    bottomRadius,\n    topRadius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    opt_topCap,\n    opt_bottomCap) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw new Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  const topCap = (opt_topCap === undefined) ? true : opt_topCap;\n  const bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;\n\n  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n\n  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);\n\n  const vertsAroundEdge = radialSubdivisions + 1;\n\n  // The slant of the cone is constant across its surface\n  const slant = Math.atan2(bottomRadius - topRadius, height);\n  const cosSlant = Math.cos(slant);\n  const sinSlant = Math.sin(slant);\n\n  const start = topCap ? -2 : 0;\n  const end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (let yy = start; yy <= end; ++yy) {\n    let v = yy / verticalSubdivisions;\n    let y = height * v;\n    let ringRadius;\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius +\n        (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n    y -= height / 2;\n    for (let ii = 0; ii < vertsAroundEdge; ++ii) {\n      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      if (yy < 0) {\n        normals.push(0, -1, 0);\n      } else if (yy > verticalSubdivisions) {\n        normals.push(0, 1, 0);\n      } else if (ringRadius === 0.0) {\n        normals.push(0, 0, 0);\n      } else {\n        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);\n      }\n      texcoords.push((ii / radialSubdivisions), 1 - v);\n    }\n  }\n\n  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line\n    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {\n      continue;\n    }\n    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 0) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii);\n      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,\n                   vertsAroundEdge * (yy + 1) + 1 + ii,\n                   vertsAroundEdge * (yy + 1) + 0 + ii);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */\nfunction expandRLEData(rleData, padding) {\n  padding = padding || [];\n  const data = [];\n  for (let ii = 0; ii < rleData.length; ii += 4) {\n    const runLength = rleData[ii];\n    const element = rleData.slice(ii + 1, ii + 4);\n    element.push.apply(element, padding);\n    for (let jj = 0; jj < runLength; ++jj) {\n      data.push.apply(data, element);\n    }\n  }\n  return data;\n}\n\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */\n\n/**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction create3DFVertices() {\n\n  const positions = [\n    // left column front\n    0,   0,  0,\n    0, 150,  0,\n    30,   0,  0,\n    0, 150,  0,\n    30, 150,  0,\n    30,   0,  0,\n\n    // top rung front\n    30,   0,  0,\n    30,  30,  0,\n    100,   0,  0,\n    30,  30,  0,\n    100,  30,  0,\n    100,   0,  0,\n\n    // middle rung front\n    30,  60,  0,\n    30,  90,  0,\n    67,  60,  0,\n    30,  90,  0,\n    67,  90,  0,\n    67,  60,  0,\n\n    // left column back\n      0,   0,  30,\n     30,   0,  30,\n      0, 150,  30,\n      0, 150,  30,\n     30,   0,  30,\n     30, 150,  30,\n\n    // top rung back\n     30,   0,  30,\n    100,   0,  30,\n     30,  30,  30,\n     30,  30,  30,\n    100,   0,  30,\n    100,  30,  30,\n\n    // middle rung back\n     30,  60,  30,\n     67,  60,  30,\n     30,  90,  30,\n     30,  90,  30,\n     67,  60,  30,\n     67,  90,  30,\n\n    // top\n      0,   0,   0,\n    100,   0,   0,\n    100,   0,  30,\n      0,   0,   0,\n    100,   0,  30,\n      0,   0,  30,\n\n    // top rung front\n    100,   0,   0,\n    100,  30,   0,\n    100,  30,  30,\n    100,   0,   0,\n    100,  30,  30,\n    100,   0,  30,\n\n    // under top rung\n    30,   30,   0,\n    30,   30,  30,\n    100,  30,  30,\n    30,   30,   0,\n    100,  30,  30,\n    100,  30,   0,\n\n    // between top rung and middle\n    30,   30,   0,\n    30,   60,  30,\n    30,   30,  30,\n    30,   30,   0,\n    30,   60,   0,\n    30,   60,  30,\n\n    // top of middle rung\n    30,   60,   0,\n    67,   60,  30,\n    30,   60,  30,\n    30,   60,   0,\n    67,   60,   0,\n    67,   60,  30,\n\n    // front of middle rung\n    67,   60,   0,\n    67,   90,  30,\n    67,   60,  30,\n    67,   60,   0,\n    67,   90,   0,\n    67,   90,  30,\n\n    // bottom of middle rung.\n    30,   90,   0,\n    30,   90,  30,\n    67,   90,  30,\n    30,   90,   0,\n    67,   90,  30,\n    67,   90,   0,\n\n    // front of bottom\n    30,   90,   0,\n    30,  150,  30,\n    30,   90,  30,\n    30,   90,   0,\n    30,  150,   0,\n    30,  150,  30,\n\n    // bottom\n    0,   150,   0,\n    0,   150,  30,\n    30,  150,  30,\n    0,   150,   0,\n    30,  150,  30,\n    30,  150,   0,\n\n    // left side\n    0,   0,   0,\n    0,   0,  30,\n    0, 150,  30,\n    0,   0,   0,\n    0, 150,  30,\n    0, 150,   0,\n  ];\n\n  const texcoords = [\n    // left column front\n    0.22, 0.19,\n    0.22, 0.79,\n    0.34, 0.19,\n    0.22, 0.79,\n    0.34, 0.79,\n    0.34, 0.19,\n\n    // top rung front\n    0.34, 0.19,\n    0.34, 0.31,\n    0.62, 0.19,\n    0.34, 0.31,\n    0.62, 0.31,\n    0.62, 0.19,\n\n    // middle rung front\n    0.34, 0.43,\n    0.34, 0.55,\n    0.49, 0.43,\n    0.34, 0.55,\n    0.49, 0.55,\n    0.49, 0.43,\n\n    // left column back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // middle rung back\n    0, 0,\n    1, 0,\n    0, 1,\n    0, 1,\n    1, 0,\n    1, 1,\n\n    // top\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // top rung front\n    0, 0,\n    1, 0,\n    1, 1,\n    0, 0,\n    1, 1,\n    0, 1,\n\n    // under top rung\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // between top rung and middle\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // top of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // front of middle rung\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom of middle rung.\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // front of bottom\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n\n    // bottom\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n\n    // left side\n    0, 0,\n    0, 1,\n    1, 1,\n    0, 0,\n    1, 1,\n    1, 0,\n  ];\n\n  const normals = expandRLEData([\n    // left column front\n    // top rung front\n    // middle rung front\n    18, 0, 0, 1,\n\n    // left column back\n    // top rung back\n    // middle rung back\n    18, 0, 0, -1,\n\n    // top\n    6, 0, 1, 0,\n\n    // top rung front\n    6, 1, 0, 0,\n\n    // under top rung\n    6, 0, -1, 0,\n\n    // between top rung and middle\n    6, 1, 0, 0,\n\n    // top of middle rung\n    6, 0, 1, 0,\n\n    // front of middle rung\n    6, 1, 0, 0,\n\n    // bottom of middle rung.\n    6, 0, -1, 0,\n\n    // front of bottom\n    6, 1, 0, 0,\n\n    // bottom\n    6, 0, -1, 0,\n\n    // left side\n    6, -1, 0, 0,\n  ]);\n\n  const colors = expandRLEData([\n        // left column front\n        // top rung front\n        // middle rung front\n      18, 200,  70, 120,\n\n        // left column back\n        // top rung back\n        // middle rung back\n      18, 80, 70, 200,\n\n        // top\n      6, 70, 200, 210,\n\n        // top rung front\n      6, 200, 200, 70,\n\n        // under top rung\n      6, 210, 100, 70,\n\n        // between top rung and middle\n      6, 210, 160, 70,\n\n        // top of middle rung\n      6, 70, 180, 210,\n\n        // front of middle rung\n      6, 100, 70, 210,\n\n        // bottom of middle rung.\n      6, 76, 210, 100,\n\n        // front of bottom\n      6, 140, 210, 80,\n\n        // bottom\n      6, 90, 130, 110,\n\n        // left side\n      6, 160, 160, 220,\n  ], [255]);\n\n  const numVerts = positions.length / 3;\n\n  const arrays = {\n    position: createAugmentedTypedArray(3, numVerts),\n    texcoord: createAugmentedTypedArray(2,  numVerts),\n    normal: createAugmentedTypedArray(3, numVerts),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),\n  };\n\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (let ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return arrays;\n}\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates crescent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCrescentBufferInfo\n */\n\n/**\n * Creates crescent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCrescentBuffers\n */\n\n/**\n * Creates crescent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the crescent.\n * @param {number} outerRadius The outer radius of the crescent.\n * @param {number} innerRadius The inner radius of the crescent.\n * @param {number} thickness The thickness of the crescent.\n * @param {number} subdivisionsDown number of steps around the crescent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n function createCrescentVertices(\n    verticalRadius,\n    outerRadius,\n    innerRadius,\n    thickness,\n    subdivisionsDown,\n    startOffset,\n    endOffset) {\n  if (subdivisionsDown <= 0) {\n    throw new Error('subdivisionDown must be > 0');\n  }\n\n  startOffset = startOffset || 0;\n  endOffset   = endOffset || 1;\n\n  const subdivisionsThick = 2;\n\n  const offsetRange = endOffset - startOffset;\n  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n\n  function lerp(a, b, s) {\n    return a + (b - a) * s;\n  }\n\n  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n    for (let z = 0; z <= subdivisionsDown; z++) {\n      const uBack = x / (subdivisionsThick - 1);\n      const v = z / subdivisionsDown;\n      const xBack = (uBack - 0.5) * 2;\n      const angle = (startOffset + (v * offsetRange)) * Math.PI;\n      const s = Math.sin(angle);\n      const c = Math.cos(angle);\n      const radius = lerp(verticalRadius, arcRadius, s);\n      const px = xBack * thickness;\n      const py = c * verticalRadius;\n      const pz = s * radius;\n      positions.push(px, py, pz);\n      const n = add(multiply$1([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  }\n\n  // Generate the individual vertices in our vertex buffer.\n  for (let x = 0; x < subdivisionsThick; x++) {\n    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  }\n\n  // Do outer surface.\n  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset, rightArcOffset) {\n    for (let z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(\n          leftArcOffset + z + 0,\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 0);\n\n      // Make triangle 2 of quad.\n      indices.push(\n          leftArcOffset + z + 1,\n          rightArcOffset + z + 1,\n          rightArcOffset + z + 0);\n    }\n  }\n\n  const numVerticesDown = subdivisionsDown + 1;\n  // front\n  createSurface(numVerticesDown * 0, numVerticesDown * 4);\n  // right\n  createSurface(numVerticesDown * 5, numVerticesDown * 7);\n  // back\n  createSurface(numVerticesDown * 6, numVerticesDown * 2);\n  // left\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */\n\n /**\n  * Creates cylinder buffers. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, WebGLBuffer>} The created buffers.\n  * @memberOf module:twgl/primitives\n  * @function createCylinderBuffers\n  */\n\n /**\n  * Creates cylinder vertices. The cylinder will be created around the origin\n  * along the y-axis.\n  *\n  * @param {number} radius Radius of cylinder.\n  * @param {number} height Height of cylinder.\n  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n  * @param {boolean} [topCap] Create top cap. Default = true.\n  * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n  * @return {Object.<string, TypedArray>} The created vertices.\n  * @memberOf module:twgl/primitives\n  */\nfunction createCylinderVertices(\n    radius,\n    height,\n    radialSubdivisions,\n    verticalSubdivisions,\n    topCap,\n    bottomCap) {\n  return createTruncatedConeVertices(\n      radius,\n      radius,\n      height,\n      radialSubdivisions,\n      verticalSubdivisions,\n      topCap,\n      bottomCap);\n}\n\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */\n\n/**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */\n\n/**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createTorusVertices(\n    radius,\n    thickness,\n    radialSubdivisions,\n    bodySubdivisions,\n    startAngle,\n    endAngle) {\n  if (radialSubdivisions < 3) {\n    throw new Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw new Error('verticalSubdivisions must be 3 or greater');\n  }\n\n  startAngle = startAngle || 0;\n  endAngle = endAngle || Math.PI * 2;\n  const range = endAngle - startAngle;\n\n  const radialParts = radialSubdivisions + 1;\n  const bodyParts   = bodySubdivisions + 1;\n  const numVertices = radialParts * bodyParts;\n  const positions   = createAugmentedTypedArray(3, numVertices);\n  const normals     = createAugmentedTypedArray(3, numVertices);\n  const texcoords   = createAugmentedTypedArray(2, numVertices);\n  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);\n\n  for (let slice = 0; slice < bodyParts; ++slice) {\n    const v = slice / bodySubdivisions;\n    const sliceAngle = v * Math.PI * 2;\n    const sliceSin = Math.sin(sliceAngle);\n    const ringRadius = radius + sliceSin * thickness;\n    const ny = Math.cos(sliceAngle);\n    const y = ny * thickness;\n    for (let ring = 0; ring < radialParts; ++ring) {\n      const u = ring / radialSubdivisions;\n      const ringAngle = startAngle + u * range;\n      const xSin = Math.sin(ringAngle);\n      const zCos = Math.cos(ringAngle);\n      const x = xSin * ringRadius;\n      const z = zCos * ringRadius;\n      const nx = xSin * sliceSin;\n      const nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line\n    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line\n      const nextRingIndex  = 1 + ring;\n      const nextSliceIndex = 1 + slice;\n      indices.push(radialParts * slice          + ring,\n                   radialParts * nextSliceIndex + ring,\n                   radialParts * slice          + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + ring,\n                   radialParts * nextSliceIndex + nextRingIndex,\n                   radialParts * slice          + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions,\n    normal:   normals,\n    texcoord: texcoords,\n    indices:  indices,\n  };\n}\n\n\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */\n\n/**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose outside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\nfunction createDiscVertices(\n    radius,\n    divisions,\n    stacks,\n    innerRadius,\n    stackPower) {\n  if (divisions < 3) {\n    throw new Error('divisions must be at least 3');\n  }\n\n  stacks = stacks ? stacks : 1;\n  stackPower = stackPower ? stackPower : 1;\n  innerRadius = innerRadius ? innerRadius : 0;\n\n  // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n  const numVertices = (divisions + 1) * (stacks + 1);\n\n  const positions = createAugmentedTypedArray(3, numVertices);\n  const normals   = createAugmentedTypedArray(3, numVertices);\n  const texcoords = createAugmentedTypedArray(2, numVertices);\n  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n\n  let firstIndex = 0;\n  const radiusSpan = radius - innerRadius;\n  const pointsPerStack = divisions + 1;\n\n  // Build the disk one stack at a time.\n  for (let stack = 0; stack <= stacks; ++stack) {\n    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (let i = 0; i <= divisions; ++i) {\n      const theta = 2.0 * Math.PI * i / divisions;\n      const x = stackRadius * Math.cos(theta);\n      const z = stackRadius * Math.sin(theta);\n\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - (i / divisions), stack / stacks);\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        const a = firstIndex + (i + 1);\n        const b = firstIndex + i;\n        const c = firstIndex + i - pointsPerStack;\n        const d = firstIndex + (i + 1) - pointsPerStack;\n\n        // Make a quad of the vertices a, b, c, d.\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices,\n  };\n}\n\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */\nfunction randInt(range) {\n  return Math.random() * range | 0;\n}\n\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */\n\n/**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */\n\n/**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */\nfunction makeRandomVertexColors(vertices, options) {\n  options = options || {};\n  const numElements = vertices.position.numElements;\n  const vColors = createAugmentedTypedArray(4, numElements, Uint8Array);\n  const rand = options.rand || function(ndx, channel) {\n    return channel < 3 ? randInt(256) : 255;\n  };\n  vertices.color = vColors;\n  if (vertices.indices) {\n    // just make random colors if index\n    for (let ii = 0; ii < numElements; ++ii) {\n      vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    }\n  } else {\n    // make random colors per triangle\n    const numVertsPerColor = options.vertsPerColor || 3;\n    const numSets = numElements / numVertsPerColor;\n    for (let ii = 0; ii < numSets; ++ii) {  // eslint-disable-line\n      const color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];\n      for (let jj = 0; jj < numVertsPerColor; ++jj) {\n        vColors.push(color);\n      }\n    }\n  }\n  return vertices;\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */\nfunction createBufferFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    return createBuffersFromArrays(gl, arrays);\n  };\n}\n\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */\nfunction createBufferInfoFunc(fn) {\n  return function(gl) {\n    const arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));\n    return createBufferInfoFromArrays(gl, arrays);\n  };\n}\n\nconst arraySpecPropertyNames = [\n  \"numComponents\",\n  \"size\",\n  \"type\",\n  \"normalize\",\n  \"stride\",\n  \"offset\",\n  \"attrib\",\n  \"name\",\n  \"attribName\",\n];\n\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */\nfunction copyElements(src, dst, dstNdx, offset) {\n  offset = offset || 0;\n  const length = src.length;\n  for (let ii = 0; ii < length; ++ii) {\n    dst[dstNdx + ii] = src[ii] + offset;\n  }\n}\n\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */\nfunction createArrayOfSameType(srcArray, length) {\n  const arraySrc = getArray(srcArray);\n  const newArray = new arraySrc.constructor(length);\n  let newArraySpec = newArray;\n  // If it appears to have been augmented make new one augmented\n  if (arraySrc.numComponents && arraySrc.numElements) {\n    augmentTypedArray(newArray, arraySrc.numComponents);\n  }\n  // If it was a full spec make new one a full spec\n  if (srcArray.data) {\n    newArraySpec = {\n      data: newArray,\n    };\n    copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n  }\n  return newArraySpec;\n}\n\n/**\n * Concatenates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primitives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatenated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction concatVertices(arrayOfArrays) {\n  const names = {};\n  let baseName;\n  // get names of all arrays.\n  // and numElements for each set of vertices\n  for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n    const arrays = arrayOfArrays[ii];\n    Object.keys(arrays).forEach(function(name) {  // eslint-disable-line\n      if (!names[name]) {\n        names[name] = [];\n      }\n      if (!baseName && name !== 'indices') {\n        baseName = name;\n      }\n      const arrayInfo = arrays[name];\n      const numComponents = getNumComponents(arrayInfo, name);\n      const array = getArray(arrayInfo);\n      const numElements = array.length / numComponents;\n      names[name].push(numElements);\n    });\n  }\n\n  // compute length of combined array\n  // and return one for reference\n  function getLengthOfCombinedArrays(name) {\n    let length = 0;\n    let arraySpec;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray(arrayInfo);\n      length += array.length;\n      if (!arraySpec || arrayInfo.data) {\n        arraySpec = arrayInfo;\n      }\n    }\n    return {\n      length: length,\n      spec: arraySpec,\n    };\n  }\n\n  function copyArraysToNewArray(name, base, newArray) {\n    let baseIndex = 0;\n    let offset = 0;\n    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {\n      const arrays = arrayOfArrays[ii];\n      const arrayInfo = arrays[name];\n      const array = getArray(arrayInfo);\n      if (name === 'indices') {\n        copyElements(array, newArray, offset, baseIndex);\n        baseIndex += base[ii];\n      } else {\n        copyElements(array, newArray, offset);\n      }\n      offset += array.length;\n    }\n  }\n\n  const base = names[baseName];\n\n  const newArrays = {};\n  Object.keys(names).forEach(function(name) {\n    const info = getLengthOfCombinedArrays(name);\n    const newArraySpec = createArrayOfSameType(info.spec, info.length);\n    copyArraysToNewArray(name, base, getArray(newArraySpec));\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The duplicated vertices.\n * @memberOf module:twgl/primitives\n */\nfunction duplicateVertices(arrays) {\n  const newArrays = {};\n  Object.keys(arrays).forEach(function(name) {\n    const arraySpec = arrays[name];\n    const srcArray = getArray(arraySpec);\n    const newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n    copyElements(srcArray, getArray(newArraySpec), 0);\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\nconst create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);\nconst create3DFBuffers = createBufferFunc(create3DFVertices);\nconst createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);\nconst createCubeBuffers = createBufferFunc(createCubeVertices);\nconst createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);\nconst createPlaneBuffers = createBufferFunc(createPlaneVertices);\nconst createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);\nconst createSphereBuffers = createBufferFunc(createSphereVertices);\nconst createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);\nconst createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);\nconst createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);\nconst createXYQuadBuffers = createBufferFunc(createXYQuadVertices);\nconst createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);\nconst createCrescentBuffers = createBufferFunc(createCrescentVertices);\nconst createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);\nconst createCylinderBuffers = createBufferFunc(createCylinderVertices);\nconst createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);\nconst createTorusBuffers = createBufferFunc(createTorusVertices);\nconst createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);\nconst createDiscBuffers = createBufferFunc(createDiscVertices);\n\n// these were mis-spelled until 4.12\nconst createCresentBufferInfo = createCrescentBufferInfo;\nconst createCresentBuffers = createCrescentBuffers;\nconst createCresentVertices = createCrescentVertices;\n\nvar primitives = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  create3DFBufferInfo: create3DFBufferInfo,\n  create3DFBuffers: create3DFBuffers,\n  create3DFVertices: create3DFVertices,\n  createAugmentedTypedArray: createAugmentedTypedArray,\n  createCubeBufferInfo: createCubeBufferInfo,\n  createCubeBuffers: createCubeBuffers,\n  createCubeVertices: createCubeVertices,\n  createPlaneBufferInfo: createPlaneBufferInfo,\n  createPlaneBuffers: createPlaneBuffers,\n  createPlaneVertices: createPlaneVertices,\n  createSphereBufferInfo: createSphereBufferInfo,\n  createSphereBuffers: createSphereBuffers,\n  createSphereVertices: createSphereVertices,\n  createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,\n  createTruncatedConeBuffers: createTruncatedConeBuffers,\n  createTruncatedConeVertices: createTruncatedConeVertices,\n  createXYQuadBufferInfo: createXYQuadBufferInfo,\n  createXYQuadBuffers: createXYQuadBuffers,\n  createXYQuadVertices: createXYQuadVertices,\n  createCresentBufferInfo: createCresentBufferInfo,\n  createCresentBuffers: createCresentBuffers,\n  createCresentVertices: createCresentVertices,\n  createCrescentBufferInfo: createCrescentBufferInfo,\n  createCrescentBuffers: createCrescentBuffers,\n  createCrescentVertices: createCrescentVertices,\n  createCylinderBufferInfo: createCylinderBufferInfo,\n  createCylinderBuffers: createCylinderBuffers,\n  createCylinderVertices: createCylinderVertices,\n  createTorusBufferInfo: createTorusBufferInfo,\n  createTorusBuffers: createTorusBuffers,\n  createTorusVertices: createTorusVertices,\n  createDiscBufferInfo: createDiscBufferInfo,\n  createDiscBuffers: createDiscBuffers,\n  createDiscVertices: createDiscVertices,\n  deindexVertices: deindexVertices,\n  flattenNormals: flattenNormals,\n  makeRandomVertexColors: makeRandomVertexColors,\n  reorientDirections: reorientDirections,\n  reorientNormals: reorientNormals,\n  reorientPositions: reorientPositions,\n  reorientVertices: reorientVertices,\n  concatVertices: concatVertices,\n  duplicateVertices: duplicateVertices\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);\n  };\n}());\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  glEnumToString: glEnumToString,\n  isWebGL1: isWebGL1,\n  isWebGL2: isWebGL2\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults$1 = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer = isArrayBuffer$1;\n\n// Should we make this on demand?\nconst getShared2DContext = function() {\n  let s_ctx;\n  return function getShared2DContext() {\n    s_ctx = s_ctx ||\n        ((typeof document !== 'undefined' && document.createElement)\n          ? document.createElement(\"canvas\").getContext(\"2d\")\n          : null);\n    return s_ctx;\n  };\n}();\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA$1                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT$1                = 0x1902;\nconst DEPTH_STENCIL$1                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE$1                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR$1                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D$2                     = 0x0de1;\nconst TEXTURE_CUBE_MAP$1               = 0x8513;\nconst TEXTURE_3D$1                     = 0x806f;\nconst TEXTURE_2D_ARRAY$1               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\n\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565$1                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1$1                      = 0x8057;\nconst RGBA4$1                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16$1            = 0x81A5;\nconst DEPTH_COMPONENT24$1            = 0x81A6;\nconst DEPTH_COMPONENT32F$1           = 0x8CAC;\nconst DEPTH32F_STENCIL8$1            = 0x8CAD;\nconst DEPTH24_STENCIL8$1             = 0x88F0;\n\n/* DataType */\nconst BYTE                         = 0x1400;\nconst UNSIGNED_BYTE$1                = 0x1401;\nconst SHORT                        = 0x1402;\nconst UNSIGNED_SHORT$1               = 0x1403;\nconst INT$1                          = 0x1404;\nconst UNSIGNED_INT$1                 = 0x1405;\nconst FLOAT$1                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA$1]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA$1]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT$1] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL$1]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1, UNSIGNED_SHORT_5_6_5], };\n    t[RGBA$1]               = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$1, HALF_FLOAT, HALF_FLOAT_OES, FLOAT$1, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1], };\n    t[DEPTH_COMPONENT$1]    = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT$1, UNSIGNED_SHORT$1], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$1], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$1, HALF_FLOAT], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$1], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$1], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$1], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$1], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$1], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$1], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$1, HALF_FLOAT], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$1], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$1], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$1], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$1], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$1], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\n    t[RGB565$1]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_5_6_5], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$1, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$1, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$1, HALF_FLOAT], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$1], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$1], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$1], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$1], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$1], };\n    t[RGBA8]              = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE], };\n    t[RGB5_A1$1]            = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA4$1]              = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$1, UNSIGNED_SHORT_4_4_4_4], };\n    t[RGB10_A2]           = { textureFormat: RGBA$1,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16F]            = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$1, HALF_FLOAT], };\n    t[RGBA32F]            = { textureFormat: RGBA$1,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$1], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$1], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$1], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$1], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$1], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16$1]  = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$1, UNSIGNED_INT$1], };\n    t[DEPTH_COMPONENT24$1]  = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$1], };\n    t[DEPTH_COMPONENT32F$1] = { textureFormat: DEPTH_COMPONENT$1, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$1], };\n    t[DEPTH24_STENCIL8$1]   = { textureFormat: DEPTH_STENCIL$1,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8], };\n    t[DEPTH32F_STENCIL8$1]  = { textureFormat: DEPTH_STENCIL$1,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer(src)) {\n    return getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE$1;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP$1 ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults$1(newDefaults) {\n  copyExistingProperties(newDefaults, defaults$1);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setPackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n\n/**\n * Set skip state to defaults\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction setSkipStateToDefault(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT, 4);\n  if (isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);\n    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n  }\n}\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D$1 || isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults$1.textureColor;\n  if (isArrayBuffer(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults$1.textureOptions;\n  internalFormat = internalFormat || RGBA$1;\n  const target = options.target || TEXTURE_2D$2;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR$1 : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE$1);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE$1);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D$2;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    setSkipStateToDefault(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      error$1(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA$1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, 0, RGBA$1, 1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA$1, 1, 1, 0, RGBA$1, UNSIGNED_BYTE$1, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$1;\n  const target = options.target || TEXTURE_2D$2;\n  if (target !== TEXTURE_CUBE_MAP$1) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          setPackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder().forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n * @private\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE$1;\n  const target = options.target || TEXTURE_2D_ARRAY$1;\n  if (target !== TEXTURE_3D$1 && target !== TEXTURE_2D_ARRAY$1) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        setPackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults$1.textureOptions;\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer(src)) {\n    const Type = getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  setSkipStateToDefault(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  setPackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n}\n\n/**\n * Creates a texture based on the options passed in.\n *\n * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES\n * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults$1.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D$2;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA$1;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP$1) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE$1);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE$1);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP$1) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else { // if (isTexImageSource(src))\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D$2;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA$1;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP$1) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D$1 || target === TEXTURE_2D_ARRAY$1) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nvar textures = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  setTextureDefaults_: setDefaults$1,\n  createSampler: createSampler,\n  createSamplers: createSamplers,\n  setSamplerParameters: setSamplerParameters,\n  createTexture: createTexture,\n  setEmptyTexture: setEmptyTexture,\n  setTextureFromArray: setTextureFromArray,\n  loadTextureFromUrl: loadTextureFromUrl,\n  setTextureFromElement: setTextureFromElement,\n  setTextureFilteringForSize: setTextureFilteringForSize,\n  setTextureParameters: setTextureParameters,\n  setDefaultTextureColor: setDefaultTextureColor,\n  createTextures: createTextures,\n  resizeTexture: resizeTexture,\n  canGenerateMipmap: canGenerateMipmap,\n  canFilter: canFilter,\n  getNumComponentsForFormat: getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error = error$1;\nconst warn = warn$1;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER$1           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D$1                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP              = 0x8513;\nconst TEXTURE_3D                    = 0x806F;\nconst TEXTURE_2D_ARRAY              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n * @private\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (!textureOrPair || isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (!textureOrPair || isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };\ntypeMap[INT]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[UNSIGNED_INT]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT, b.stride || 0, b.offset || 0);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index, b.divisor || 0);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (gl.vertexAttribDivisor) {\n        gl.vertexAttribDivisor(index + i, b.divisor || 0);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\nconst errorRE = /ERROR:\\s*\\d+:(\\d+)/gi;\nfunction addLineNumbersWithError(src, log = '', lineOffset = 0) {\n  // Note: Error message formats are not defined by any spec so this may or may not work.\n  const matches = [...log.matchAll(errorRE)];\n  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {\n    const lineNo = parseInt(m[1]);\n    const next = matches[ndx + 1];\n    const end = next ? next.index : log.length;\n    const msg = log.substring(m.index, end);\n    return [lineNo - 1, msg];\n  }));\n  return src.split('\\n').map((line, lineNo) => {\n    const err = lineNoToErrorMap.get(lineNo);\n    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\\n\\n^^^ ${err}` : ''}`;\n  }).join('\\n');\n}\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\n/**\n * Program Callback\n * @callback ProgramCallback\n * @param {string} [err] error message, falsy if no error\n * @param {WebGLProgram|module:twgl.ProgramInfo} [result] the program or programInfo\n */\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Remove the first end of line because WebGL 2.0 requires\n * #version 300 es\n * as the first line. No whitespace allowed before that line\n * so\n *\n * <script>\n * #version 300 es\n * </script>\n *\n * Has one line before it which is invalid according to GLSL ES 3.00\n *\n * @param {string} shaderSource The source of the shader\n * @returns {{shaderSource: string, lineOffset: number}}\n * @private\n */\nfunction prepShaderSource(shaderSource) {\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n  return {lineOffset, shaderSource};\n}\n\n/**\n * @param {module:twgl.ProgramOptions} progOptions\n * @param {string} msg\n * @return null\n * @private\n */\nfunction reportError(progOptions, msg) {\n  progOptions.errorCallback(msg);\n  if (progOptions.callback) {\n    setTimeout(() => {\n      progOptions.callback(`${msg}\\n${progOptions.errors.join('\\n')}`);\n    });\n  }\n  return null;\n}\n\n/**\n * Check Shader status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {number} shaderType The shader type\n * @param {WebGLShader} shader The shader\n * @param {ErrorCallback} [errFn] function to receive error message.\n * @return {string} errors or empty string\n * @private\n */\nfunction checkShaderStatus(gl, shaderType, shader, errFn) {\n  errFn = errFn || error;\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    const {lineOffset, shaderSource} = prepShaderSource(gl.getShaderSource(shader));\n    const error = `${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\\nError compiling ${glEnumToString(gl, shaderType)}: ${lastError}`;\n    errFn(error);\n    return error;\n  }\n  return '';\n}\n\n/**\n * @typedef {Object} FullProgramSpec\n * @property {string[]} shaders the shader source or element ids.\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {string[]|module:twgl.FullProgramSpec} ProgramSpec\n * @memberOf module:twgl\n */\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>|string[]} [attribLocations] a attribute name to location map, or array of attribute names where index = location.\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @property {ProgramCallback} [callback] callback for async program compilation.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  let callback;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n    callback = opt.callback;\n  }\n\n  const errorCallback = opt_errorCallback || error;\n  const errors = [];\n  const options = {\n    errorCallback(msg, ...args) {\n      errors.push(msg);\n      errorCallback(msg, ...args);\n    },\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n    callback,\n    errors,\n  };\n\n  {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs || {};\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteProgramAndShaders(gl, program, notThese) {\n  const shaders = gl.getAttachedShaders(program);\n  for (const shader of shaders) {\n    if (notThese.has(shader)) {\n      gl.deleteShader(shader);\n    }\n  }\n  gl.deleteProgram(program);\n}\n\nconst wait = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));\n\nfunction createProgramNoCheck(gl, shaders, programOptions) {\n  const program = gl.createProgram();\n  const {\n    attribLocations,\n    transformFeedbackVaryings,\n    transformFeedbackMode,\n  } = getProgramOptions(programOptions);\n\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof shader === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = gl.createShader(type);\n      gl.shaderSource(shader, prepShaderSource(src).shaderSource);\n      gl.compileShader(shader);\n      gl.attachShader(program, shader);\n    }\n  }\n\n  Object.entries(attribLocations).forEach(([attrib, loc]) => gl.bindAttribLocation(program, loc, attrib));\n\n  {\n    let varyings = transformFeedbackVaryings;\n    if (varyings) {\n      if (varyings.attribs) {\n        varyings = varyings.attribs;\n      }\n      if (!Array.isArray(varyings)) {\n        varyings = Object.keys(varyings);\n      }\n      gl.transformFeedbackVaryings(program, varyings, transformFeedbackMode || SEPARATE_ATTRIBS);\n    }\n  }\n\n  gl.linkProgram(program);\n  return program;\n}\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error of a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  // This code is really convoluted, because it may or may not be async\n  // Maybe it would be better to have a separate function\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaderSet = new Set(shaders);\n  const program = createProgramNoCheck(gl, shaders, progOptions);\n\n  function hasErrors(gl, program) {\n    const errors = getProgramErrors(gl, program, progOptions.errorCallback);\n    if (errors) {\n      deleteProgramAndShaders(gl, program, shaderSet);\n    }\n    return errors;\n  }\n\n  if (progOptions.callback) {\n    waitForProgramLinkCompletionAsync(gl, program).then(() => {\n      const errors = hasErrors(gl, program);\n      progOptions.callback(errors, errors ? undefined : program);\n    });\n    return undefined;\n  }\n\n  return hasErrors(gl, program) ? undefined : program;\n}\n\n/**\n * This only works because the functions it wraps the first 2 arguments\n * are gl and any, followed by things that become programOptions\n * @private\n */\nfunction wrapCallbackFnToAsyncFn(fn) {\n  return function(gl, arg1, ...args) {\n    return new Promise((resolve, reject) => {\n      const programOptions = getProgramOptions(...args);\n      programOptions.callback = (err, program) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(program);\n        }\n      };\n      fn(gl, arg1, programOptions);\n    });\n  };\n}\n\n/**\n * Same as createProgram but returns a promise\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramAsync(gl, [vs, fs], options);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramAsync(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @function\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<WebGLProgram>} The created program\n * @memberOf module:twgl/programs\n */\nconst createProgramAsync = wrapCallbackFnToAsyncFn(createProgram);\n\n/**\n * Same as createProgramInfo but returns a promise\n * @function\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {Promise<module:twgl.ProgramInfo>} The created ProgramInfo\n * @memberOf module:twgl/programs\n */\nconst createProgramInfoAsync = wrapCallbackFnToAsyncFn(createProgramInfo);\n\nasync function waitForProgramLinkCompletionAsync(gl, program) {\n  const ext = gl.getExtension('KHR_parallel_shader_compile');\n  const checkFn = ext\n      ? (gl, program) => gl.getProgramParameter(program, ext.COMPLETION_STATUS_KHR)\n      : () => true;\n\n  let waitTime = 0;\n  do {\n    await wait(waitTime);  // must wait at least once\n    waitTime = 1000 / 60;\n  } while (!checkFn(gl, program));\n}\n\nasync function waitForAllProgramsLinkCompletionAsync(gl, programs) {\n  for (const program of Object.values(programs)) {\n    await waitForProgramLinkCompletionAsync(gl, program);\n  }\n}\n\n/**\n * Check a program's link status\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program Program to check\n * @param {ErrorCallback} [errFn] func for errors\n * @return {string?} errors if program is failed, else undefined\n * @private\n */\nfunction getProgramErrors(gl, program, errFn) {\n  errFn = errFn || error;\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    errFn(`Error in program linking: ${lastError}`);\n    // print any errors from these shaders\n    const shaders = gl.getAttachedShaders(program);\n    const errors = shaders.map(shader => checkShaderStatus(gl, gl.getShaderParameter(shader, gl.SHADER_TYPE), shader, errFn));\n    return `${lastError}\\n${errors.filter(_ => _).join('\\n')}`;\n  }\n  return undefined;\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (const scriptId of shaderScriptIds) {\n    const shaderScript = getElementById(scriptId);\n    if (!shaderScript) {\n      return reportError(progOptions, `unknown script element: ${scriptId}`);\n    }\n    shaders.push(shaderScript.text);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error or a callback was provided.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  return createProgram(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\nconst tokenRE = /(\\.|\\[|]|\\w+)/g;\nconst isDigit = s => s >= '0' && s <= '9';\nfunction addSetterToUniformTree(fullPath, setter, node, uniformSetters) {\n  const tokens = fullPath.split(tokenRE).filter(s => s !== '');\n  let tokenNdx = 0;\n  let path = '';\n\n  for (;;) {\n    const token = tokens[tokenNdx++];  // has to be name or number\n    path += token;\n    const isArrayIndex = isDigit(token[0]);\n    const accessor = isArrayIndex\n        ? parseInt(token)\n        : token;\n    if (isArrayIndex) {\n      path += tokens[tokenNdx++];  // skip ']'\n    }\n    const isLastToken = tokenNdx === tokens.length;\n    if (isLastToken) {\n      node[accessor] = setter;\n      break;\n    } else {\n      const token = tokens[tokenNdx++];  // has to be . or [\n      const isArray = token === '[';\n      const child = node[accessor] || (isArray ? [] : {});\n      node[accessor] = child;\n      node = child;\n      uniformSetters[path] = uniformSetters[path] || function(node) {\n        return function(value) {\n          setUniformTree(node, value);\n        };\n      }(child);\n      path += token;\n    }\n  }\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo, location) {\n    const isArray = uniformInfo.name.endsWith(\"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = {};\n  const uniformTree = {};\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.endsWith(\"[0]\")) {\n      name = name.substr(0, name.length - 3);\n    }\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    // the uniform will have no location if it's in a uniform block\n    if (location) {\n      const setter = createUniformSetter(program, uniformInfo, location);\n      uniformSetters[name] = setter;\n      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);\n    }\n  }\n\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {string} name The name of the uniform\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: gl.getUniformBlockIndex(program, name),\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\nconst pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;\n\nfunction createUniformBlockUniformSetter(view, isArray, rows, cols) {\n  if (isArray || rows) {\n    cols = cols || 1;\n    const numElements = view.length;\n    const totalRows = numElements / 4;\n    return function(value) {\n      let dst = 0;\n      let src = 0;\n      for (let row = 0; row < totalRows; ++row) {\n        for (let col = 0; col < cols; ++col) {\n          view[dst++] = value[src++];\n        }\n        dst += 4 - cols;\n      }\n    };\n  } else {\n    return function(value) {\n      if (value.length) {\n        view.set(value);\n      } else {\n        view[0] = value;\n      }\n    };\n  }\n}\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @property {Object<string, function>} setters A setter for this uniform.\n *   The reason to use setters is elements of arrays are padded to vec4 sizes which\n *   means if you want to set an array of 4 floats you'd need to set 16 values\n *   (or set elements 0, 4, 8, 12). In other words\n *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`\n *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in\n *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)\n *   or via {@link module:twgl.setBlockUniforms}\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const array = new ArrayBuffer(blockSpec.size);\n  const buffer = gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  const setters = {};\n  const setterTree = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    let name = data.name;\n    if (name.startsWith(prefix)) {\n      name = name.substr(prefix.length);\n    }\n    const isArray = name.endsWith('[0]');\n    if (isArray) {\n      name = name.substr(0, name.length - 3);\n    }\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const byteLength = isArray\n        ? pad(typeInfo.size, 16) * data.size\n        : typeInfo.size * data.size;\n    const uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);\n    uniforms[name] = uniformView;\n    // Note: I'm not sure what to do here. The original\n    // idea was to create TypedArray views into each part\n    // of the block. This is useful, for example if you have\n    // a block with { mat4: model; mat4 view; mat4 projection; }\n    // you'll get a Float32Array for each one suitable for\n    // passing to most JS math libraries including twgl's and glMatrix.js.\n    //\n    // But, if you have a an array of structures, especially if that\n    // array is large, you get a whole bunch of TypedArray views.\n    // Every one of them has overhead and switching between them all\n    // is probably a cache miss. In that case it would really be better\n    // to just have one view (asFloat) and have all the setters\n    // just reference the correct portion. But, then you can't easily\n    // treat a matrix, or a vec4, as a standalone thing like you can\n    // with all the views.\n    //\n    // Another problem with the views is they are not shared. With\n    // uniforms you have one set of setters. With UniformBlockInfo\n    // you have a set of setters *pre block instance*. That's because\n    // TypedArray views can't be mapped to different buffers.\n    //\n    // My gut right now is if you really want the speed and compactness\n    // then you should probably roll your own solution. TWGL's goal\n    // here is ease of use as AFAICT there is no simple generic efficient\n    // solution.\n    const setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);\n    setters[name] = setter;\n    addSetterToUniformTree(name, setter, setterTree, setters);\n  });\n  return {\n    name: blockName,\n    array,\n    asFloat: new Float32Array(array),  // for debugging\n    buffer,\n    uniforms,\n    setters,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  You can also fill out structure and array values either via\n *  shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Lights {\n *       Light lights[2];\n *     };\n *\n *     // in JavaScript\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices.\n *\n *     twgl.setBlockUniforms(someBlockInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.\n *  For example the actual layout of `someVec3Array` above in memory\n *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values\n *  as shown about and copies them, skipping the padding. This might\n *  be confusing if you're already familiar with Uniform blocks.\n *\n *  If you want to deal with the padding yourself you can access the array\n *  buffer views directly. eg:\n *\n *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const setters = uniformBlockInfo.setters;\n  for (const name in values) {\n    const setter = setters[name];\n    if (setter) {\n      const value = values[name];\n      setter(value);\n    }\n  }\n}\n\nfunction setUniformTree(tree, values) {\n  for (const name in values) {\n    const prop = tree[name];\n    if (typeof prop === 'function') {\n      prop(values[name]);\n    } else {\n      setUniformTree(tree[name], values[name]);\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     let texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n *   You can also fill out structure and array values either via\n *   shortcut. Example\n *\n *     // -- in shader --\n *     struct Light {\n *       float intensity;\n *       vec4 color;\n *       float nearFar[2];\n *     };\n *     uniform Light lights[2];\n *\n *     // in JavaScript\n *\n *     twgl.setUniforms(programInfo, {\n *       lights: [\n *         { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.1, 10] },\n *         { intensity: 2.0, color: [0, 0, 1, 1], nearFar[0.2, 15] },\n *       ],\n *     });\n *\n *   or the more traditional way\n *\n *     twgl.setUniforms(programInfo, {\n *       \"lights[0].intensity\": 5.0,\n *       \"lights[0].color\": [1, 0, 0, 1],\n *       \"lights[0].nearFar\": [0.1, 10],\n *       \"lights[1].intensity\": 2.0,\n *       \"lights[1].color\": [0, 0, 1, 1],\n *       \"lights[1].nearFar\": [0.2, 15],\n *     });\n *\n *   You can also specify partial paths\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1]': { intensity: 5.0, color: [1, 0, 0, 1], nearFar[0.2, 15] },\n *     });\n *\n *   But you can not specify leaf array indices\n *\n *     twgl.setUniforms(programInfo, {\n *       'lights[1].nearFar[1]': 15,     // BAD! nearFar is a leaf\n *       'lights[1].nearFar': [0.2, 15], // GOOD\n *     });\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, ...args) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = args.length;\n  for (let aNdx = 0; aNdx < numArgs; ++aNdx) {\n    const values = args[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n      continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n * @private\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program,\n    uniformSetters,\n    attribSetters,\n  };\n\n  if (isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\nconst notIdRE = /\\s|{|}|;/;\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const errors = [];\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (!notIdRE.test(source)) {\n      const script = getElementById(source);\n      if (!script) {\n        const err = `no element with id: ${source}`;\n        progOptions.errorCallback(err);\n        errors.push(err);\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n\n  if (errors.length) {\n    return reportError(progOptions, '');\n  }\n\n  const origCallback = progOptions.callback;\n  if (origCallback) {\n    progOptions.callback = (err, program) => {\n      origCallback(err, err ? undefined : createProgramInfoFromProgram(gl, program));\n    };\n  }\n\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n\n  return createProgramInfoFromProgram(gl, program);\n}\n\nfunction checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions) {\n  // check errors for everything.\n  for (const [name, program] of Object.entries(programs)) {\n    const options = {...programOptions};\n    const spec = programSpecs[name];\n    if (!Array.isArray(spec)) {\n      Object.assign(options, spec);\n    }\n    const errors = getProgramErrors(gl, program, options.errorCallback);\n    if (errors) {\n      // delete everything we created\n      for (const program of Object.values(programs)) {\n        const shaders = gl.getAttachedShaders(program);\n        gl.deleteProgram(program);\n        for (const shader of shaders) {\n          // Don't delete it if we didn't create it.\n          if (!noDeleteShadersSet.has(shader)) {\n            gl.deleteShader(shader);\n          }\n        }\n      }\n      return errors;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Creates multiple programs\n *\n * Note: the reason this function exists is because the fastest way to create multiple\n * programs in WebGL is to create and compile all shaders and link all programs and only\n * afterwards check if they succeeded. In that way, giving all your shaders\n *\n * @see {@link module:twgl.createProgram}\n *\n * Example:\n *\n *     const programs = twgl.createPrograms(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\n */\nfunction createPrograms(gl, programSpecs, programOptions = {}) {\n  // Remember existing shaders so that if there is an error we don't delete them\n  const noDeleteShadersSet = new Set();\n\n  // compile and link everything\n  const programs = Object.fromEntries(Object.entries(programSpecs).map(([name, spec]) => {\n    const options = {...programOptions};\n    const shaders = Array.isArray(spec) ? spec : spec.shaders;\n    if (!Array.isArray(spec)) {\n      Object.assign(options, spec);\n    }\n    shaders.forEach(noDeleteShadersSet.add, noDeleteShadersSet);\n    return [name, createProgramNoCheck(gl, shaders, options)];\n  }));\n\n  if (programOptions.callback) {\n    waitForAllProgramsLinkCompletionAsync(gl, programs).then(() => {\n      const errors = checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\n      programOptions.callback(errors, errors ? undefined : programs);\n    });\n    return undefined;\n  }\n\n  const errors = checkAllPrograms(gl, programs, programSpecs, noDeleteShadersSet, programOptions);\n  return errors ? undefined : programs;\n}\n\n/**\n * Creates multiple programInfos\n *\n * Note: the reason this function exists is because the fastest way to create multiple\n * programs in WebGL is to create and compile all shaders and link all programs and only\n * afterwards check if they succeeded. In that way, giving all your shaders\n *\n * @see {@link module:twgl.createProgramInfo}\n *\n * Examples:\n *\n *     const programInfos = twgl.createProgramInfos(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * or\n *\n *     const {lambert, phong, particles} = twgl.createProgramInfos(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, module:twgl.ProgramInfo>?} the created programInfos by name\n */\nfunction createProgramInfos(gl, programSpecs, programOptions) {\n  programOptions = getProgramOptions(programOptions);\n\n  function createProgramInfosForPrograms(gl, programs) {\n    return Object.fromEntries(Object.entries(programs).map(([name, program]) =>\n      [name, createProgramInfoFromProgram(gl, program)]\n    ));\n  }\n\n  const origCallback = programOptions.callback;\n  if (origCallback) {\n    programOptions.callback = (err, programs) => {\n      origCallback(err, err ? undefined : createProgramInfosForPrograms(gl, programs));\n    };\n  }\n\n  const programs = createPrograms(gl, programSpecs, programOptions);\n  if (origCallback || !programs) {\n    return undefined;\n  }\n\n  return createProgramInfosForPrograms(gl, programs);\n}\n\n/**\n * Creates multiple programs asynchronously\n *\n * @see {@link module:twgl.createProgramAsync}\n *\n * Example:\n *\n *     const programs = await twgl.createProgramsAsync(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @function\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Object.<string, WebGLProgram>?} the created programInfos by name\n */\nconst createProgramsAsync = wrapCallbackFnToAsyncFn(createPrograms);\n\n/**\n * Creates multiple programInfos asynchronously\n *\n * @see {@link module:twgl.createProgramInfoAsync}\n *\n * Example:\n *\n *     const programInfos = await twgl.createProgramInfosAsync(gl, {\n *       lambert: [lambertVS, lambertFS],\n *       phong: [phongVS, phoneFS],\n *       particles: {\n *         shaders: [particlesVS, particlesFS],\n *         transformFeedbackVaryings: ['position', 'velocity'],\n *       },\n *     });\n *\n * @function\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string, module:twgl.ProgramSpec>} programSpecs An object of ProgramSpecs, one per program.\n * @param {module:twgl.ProgramOptions} [programOptions] options to apply to all programs\n * @return {Promise<Object.<string, module:twgl.ProgramInfo>>} the created programInfos by name\n */\nconst createProgramInfosAsync = wrapCallbackFnToAsyncFn(createProgramInfos);\n\nvar programs = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createAttributeSetters: createAttributeSetters,\n  createProgram: createProgram,\n  createProgramAsync: createProgramAsync,\n  createPrograms: createPrograms,\n  createProgramsAsync: createProgramsAsync,\n  createProgramFromScripts: createProgramFromScripts,\n  createProgramFromSources: createProgramFromSources,\n  createProgramInfo: createProgramInfo,\n  createProgramInfoAsync: createProgramInfoAsync,\n  createProgramInfos: createProgramInfos,\n  createProgramInfosAsync: createProgramInfosAsync,\n  createProgramInfoFromProgram: createProgramInfoFromProgram,\n  createUniformSetters: createUniformSetters,\n  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,\n  createUniformBlockInfo: createUniformBlockInfo,\n  createTransformFeedback: createTransformFeedback,\n  createTransformFeedbackInfo: createTransformFeedbackInfo,\n  bindTransformFeedbackInfo: bindTransformFeedbackInfo,\n  setAttributes: setAttributes,\n  setBuffersAndAttributes: setBuffersAndAttributes,\n  setUniforms: setUniforms,\n  setUniformsAndBindTextures: setUniformsAndBindTextures,\n  setUniformBlock: setUniformBlock,\n  setBlockUniforms: setBlockUniforms,\n  bindUniformBlock: bindUniformBlock\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nvar draw = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  drawBufferInfo: drawBufferInfo,\n  drawObjectList: drawObjectList\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D                     = 0x0de1;\n\nconst UNSIGNED_BYTE                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT                = 0x1902;\nconst RGBA                           = 0x1908;\nconst DEPTH_COMPONENT24              = 0x81a6;\nconst DEPTH_COMPONENT32F             = 0x8cac;\nconst DEPTH24_STENCIL8               = 0x88f0;\nconst DEPTH32F_STENCIL8              = 0x8cad;\n\n/* Framebuffer Object. */\nconst RGBA4                          = 0x8056;\nconst RGB5_A1                        = 0x8057;\nconst RGB565                         = 0x8D62;\nconst DEPTH_COMPONENT16              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n/* TextureWrapMode */\nconst CLAMP_TO_EDGE                  = 0x812F;\n\n/* TextureMagFilter */\nconst LINEAR                         = 0x2601;\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attachmentPoint] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [samples] The number of samples. Default = 1\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA, type: UNSIGNED_BYTE, min: LINEAR, wrap: CLAMP_TO_EDGE, },\n  { format: DEPTH_STENCIL, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT24] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT32F] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH24_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH32F_STENCIL8] = DEPTH_STENCIL_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format, internalFormat) {\n  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4] = true;\nrenderbufferFormats[RGB5_A1] = true;\nrenderbufferFormats[RGB565] = true;\nrenderbufferFormats[DEPTH_STENCIL] = true;\nrenderbufferFormats[DEPTH_COMPONENT16] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\nconst MAX_COLOR_ATTACHMENT_POINTS = 32;  // even an 3090 only supports 8 but WebGL/OpenGL ES define constants for 32\n\nfunction isColorAttachmentPoint(attachmentPoint) {\n  return attachmentPoint >= COLOR_ATTACHMENT0 && attachmentPoint < COLOR_ATTACHMENT0 + MAX_COLOR_ATTACHMENT_POINTS;\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n * It also leaves the framebuffer it just created as the currently bound `FRAMEBUFFER`.\n * Note: If this is WebGL2 or if you called {@link module:twgl.addExtensionsToContext} then it will set the drawBuffers\n * to `[COLOR_ATTACHMENT0, COLOR_ATTACHMENT1, ...]` for how ever many color attachments were created.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  const usedColorAttachmentsPoints = [];\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n\n  attachments.forEach(function(attachmentOptions, i) {\n    let attachment = attachmentOptions.attachment;\n    const samples = attachmentOptions.samples;\n    const format = attachmentOptions.format;\n    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + i;\n    }\n    if (isColorAttachmentPoint(attachmentPoint)) {\n      usedColorAttachmentsPoints.push(attachmentPoint);\n    }\n    if (!attachment) {\n      if (samples !== undefined || isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        if (samples > 1) {\n          gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n        } else {\n          gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n        }\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE;\n        }\n        attachment = createTexture(gl, textureOptions);\n      }\n    }\n    if (isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.target || TEXTURE_2D,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  if (gl.drawBuffers) {\n    gl.drawBuffers(usedColorAttachmentsPoints);\n  }\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    const samples = attachmentOptions.samples;\n    if (samples !== undefined || isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      if (samples > 1) {\n        gl.renderbufferStorageMultisample(RENDERBUFFER, samples, format, width, height);\n      } else {\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      }\n    } else if (isTexture(gl, attachment)) {\n      resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nvar framebuffers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bindFramebufferInfo: bindFramebufferInfo,\n  createFramebufferInfo: createFramebufferInfo,\n  resizeFramebufferInfo: resizeFramebufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n *\n * @return {WebGLVertexArrayObject|null} The created WebGLVertexArrayObject\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nvar vertexArrays = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createVertexArrayInfo: createVertexArrayInfo,\n  createVAOAndSetAttributes: createVAOAndSetAttributes,\n  createVAOFromBufferInfo: createVAOFromBufferInfo\n});\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nconst defaults = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults(newDefaults) {\n  copyExistingProperties(newDefaults, defaults);\n  setDefaults$2(newDefaults);  // eslint-disable-line\n  setDefaults$1(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          warn$1(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n * @deprecated\n * @private\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport { addExtensionsToContext, attributes, bindFramebufferInfo, bindTransformFeedbackInfo, bindUniformBlock, canFilter, canGenerateMipmap, createAttribsFromArrays, createAttributeSetters, createBufferFromArray, createBufferFromTypedArray, createBufferInfoFromArrays, createBuffersFromArrays, createFramebufferInfo, createProgram, createProgramAsync, createProgramFromScripts, createProgramFromSources, createProgramInfo, createProgramInfoAsync, createProgramInfoFromProgram, createProgramInfos, createProgramInfosAsync, createPrograms, createProgramsAsync, createSampler, createSamplers, createTexture, createTextures, createTransformFeedback, createTransformFeedbackInfo, createUniformBlockInfo, createUniformBlockInfoFromProgram, createUniformBlockSpecFromProgram, createUniformSetters, createVAOAndSetAttributes, createVAOFromBufferInfo, createVertexArrayInfo, draw, drawBufferInfo, drawObjectList, framebuffers, getArray$1 as getArray_, getBytesPerElementForInternalFormat, getContext, getFormatAndTypeForInternalFormat, getGLTypeForTypedArray, getGLTypeForTypedArrayType, getNumComponentsForFormat, getNumComponents$1 as getNumComponents_, getTypedArrayTypeForGLType, getWebGLContext, glEnumToString, isArrayBuffer$1 as isArrayBuffer, isWebGL1, isWebGL2, loadTextureFromUrl, m4, primitives, programs, resizeCanvasToDisplaySize, resizeFramebufferInfo, resizeTexture, setAttribInfoBufferFromArray, setDefaults$2 as setAttributeDefaults_, setAttributePrefix, setAttributes, setBlockUniforms, setBuffersAndAttributes, setDefaultTextureColor, setDefaults, setEmptyTexture, setSamplerParameters, setDefaults$1 as setTextureDefaults_, setTextureFilteringForSize, setTextureFromArray, setTextureFromElement, setTextureParameters, setUniformBlock, setUniforms, setUniformsAndBindTextures, textures, typedarrays, utils, v3, vertexArrays };\n","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","// ===== gl.ts ==========================================================\n// Interactions with the GL context, as a global singleton\n// Ben Coleman, 2023\n// ======================================================================\n\nimport log from 'loglevel'\n\n// Memoized global WebGL2 context\nlet glContext: WebGL2RenderingContext | undefined\n\n/**\n * Get the WebGL2 context, if it doesn't exist create it\n *\n * @returns {WebGL2RenderingContext} - Global WebGL2 context\n * @param {boolean} aa - Enable antialiasing\n * @param {string} selector - CSS selector for locating the canvas element\n */\nexport function getGl(aa = true, selector = 'canvas') {\n  if (glContext) {\n    return glContext\n  }\n\n  log.info(`🖌️ Creating WebGL2 context in ${selector}`)\n\n  const canvas = document.querySelector(selector) as HTMLCanvasElement\n  glContext = canvas.getContext('webgl2', { antialias: aa }) ?? undefined\n\n  if (!glContext) {\n    log.error('💥 Unable to create WebGL2 context!')\n  }\n\n  return glContext\n}\n","// ===== models/cache.ts ======================================================\n// A simple cache for models, so we don't have to keep loading them\n// Ben Coleman, 2023\n// ============================================================================\n\nimport log from 'loglevel'\nimport { Model } from './model.ts'\n\n/**\n * A simple cache for models, indexed by name\n */\nexport class ModelCache {\n  private cache = new Map<string, Model>()\n\n  get(name: string) {\n    if (!this.cache.has(name)) {\n      throw new Error(`Model ${name} not found in cache`)\n    }\n\n    return this.cache.get(name)\n  }\n\n  add(model: Model) {\n    log.debug(`🧰 Adding model '${model.name}' to cache`)\n\n    this.cache.set(model.name, model)\n  }\n}\n","// ===== light.ts =============================================================\n// A point light source\n// Ben Coleman, 2023\n// ============================================================================\n\nimport { ProgramInfo, setUniforms } from 'twgl.js'\nimport { RGB, UniformSet, XYZ } from '../core/types.ts'\n\nconst UNIFORM_PREFIX = 'u_light'\n\nexport class Light {\n  /**\n   * Position of the light in world space\n   * @default [0, 0, 0]\n   */\n  public position: XYZ\n\n  /**\n   * Colour of the light\n   * @default [1, 1, 1]\n   */\n  public colour: RGB\n\n  /**\n   * Intensity of the light\n   * @default 1.0\n   */\n  public intensity: number\n\n  /** Create a new default light */\n  constructor() {\n    this.position = [0, 0, 0]\n    this.colour = [1, 1, 1]\n    this.intensity = 1.0\n  }\n\n  /**\n   * Applies the light to the given program as a set of uniforms\n   * Each uniform is prefixed with `u_light`, e.g. `u_lightPosition`\n   */\n  apply(programInfo: ProgramInfo) {\n    setUniforms(programInfo, this.Uniforms)\n  }\n\n  /** Return a map of uniforms for this light, with a prefix */\n  public get Uniforms(): UniformSet {\n    return {\n      [`${UNIFORM_PREFIX}Position`]: [...this.position, 1],\n      [`${UNIFORM_PREFIX}Colour`]: [...this.colour, 1],\n    }\n  }\n}\n","// ===== camera.ts ============================================================\n// Represents a camera in 3D space\n// Ben Coleman, 2023\n// ============================================================================\n\nimport { mat4 } from 'gl-matrix'\nimport { XYZ } from '../core/types.ts'\n\nexport enum CameraType {\n  PERSPECTIVE = 1,\n  ORTHOGRAPHIC,\n}\n\nexport class Camera {\n  /**\n   * Camera position\n   * @default [0, 0, 30]\n   */\n  public position: XYZ\n\n  /**\n   * Camera look at point\n   * @default [0, 0, 0]\n   */\n  public lookAt: XYZ\n\n  /**\n   * Field of view in degrees, default 45\n   * @default 45\n   */\n  public fov: number\n\n  /**\n   * Near clipping plane, default 0.1\n   * @default 0.1\n   */\n  public near: number\n\n  /**\n   * Far clipping plane, default 100\n   * @default 100\n   */\n  public far: number\n\n  /**\n   * Camera up vector\n   * @default [0, 1, 0]\n   */\n  public readonly up: XYZ\n\n  /**\n   * Change camera projection, default perspective\n   * @default perspective\n   * @see CameraType\n   */\n  public type: CameraType\n\n  /**\n   * Orthographic zoom level, only used when type is orthographic\n   * @default 20\n   */\n  public orthoZoom: number\n\n  /** Create a new default camera */\n  constructor(type = CameraType.PERSPECTIVE) {\n    this.position = [0, 0, 30]\n    this.lookAt = [0, 0, 0]\n    this.up = [0, 1, 0]\n\n    this.near = 0.1\n    this.far = 100\n\n    this.fov = 45\n\n    this.type = type\n    this.orthoZoom = 20\n  }\n\n  /** Get the view matrix for this camera */\n  get matrix() {\n    const camView = mat4.targetTo(mat4.create(), this.position, this.lookAt, this.up)\n    return camView\n  }\n\n  /** Get the projection matrix for this camera */\n  projectionMatrix(aspectRatio: number) {\n    if (this.type === CameraType.ORTHOGRAPHIC) {\n      const camProj = mat4.ortho(\n        mat4.create(),\n        -aspectRatio * this.orthoZoom,\n        aspectRatio * this.orthoZoom,\n        -this.orthoZoom,\n        this.orthoZoom,\n        this.near,\n        this.far\n      )\n\n      return camProj\n    } else {\n      const camProj = mat4.perspective(mat4.create(), this.fov * (Math.PI / 180), aspectRatio, this.near, this.far)\n\n      return camProj\n    }\n  }\n}\n","// ===== models/model.ts ======================================================\n// Instance class, holds a model and position, rotation, scale etc\n// Ben Coleman, 2023\n// ============================================================================\n\nimport { mat4 } from 'gl-matrix'\nimport { ProgramInfo } from 'twgl.js'\nimport { Renderable, UniformSet } from '../core/types.ts'\n\n/**\n * An instance of thing in the world to be rendered, with position, rotation, scale etc\n */\nexport class Instance {\n  public readonly renderable: Renderable | undefined\n  public position: [number, number, number] | undefined\n  public scale: [number, number, number] | undefined\n  public rotate: [number, number, number] | undefined\n  //public transparent = false\n\n  /**\n   * @param {Model} model - Model to use for this instance\n   */\n  constructor(renderable: Renderable) {\n    this.renderable = renderable\n  }\n\n  /**\n   * Rotate this instance around the X axis\n   */\n  rotateX(angle: number) {\n    if (!this.rotate) this.rotate = [0, 0, 0]\n    this.rotate[0] += angle\n  }\n\n  /**\n   * Rotate this instance around the Y axis\n   */\n  rotateY(angle: number) {\n    if (!this.rotate) this.rotate = [0, 0, 0]\n    this.rotate[1] += angle\n  }\n\n  /**\n   * Rotate this instance around the Z axis\n   */\n  rotateZ(angle: number) {\n    if (!this.rotate) this.rotate = [0, 0, 0]\n    this.rotate[2] += angle\n  }\n\n  /**\n   * Render this instance in the world\n   * @param {WebGL2RenderingContext} gl - WebGL context to render into\n   * @param {UniformSet} uniforms - Map of uniforms to pass to shader\n   * @param {mat4} viewProjection - View projection matrix\n   * @param {ProgramInfo} programInfo - Shader program info\n   */\n  render(gl: WebGL2RenderingContext, uniforms: UniformSet, viewProjection: mat4, programInfo: ProgramInfo) {\n    if (!this.renderable) return\n    if (!gl) return\n\n    // Local instance transforms are applied in this order to form the world matrix\n    const world = mat4.create()\n    if (this.scale) {\n      mat4.scale(world, world, this.scale)\n    }\n\n    if (this.position) {\n      mat4.translate(world, world, this.position)\n    }\n\n    if (this.rotate) {\n      mat4.rotateX(world, world, this.rotate[0])\n      mat4.rotateY(world, world, this.rotate[1])\n      mat4.rotateZ(world, world, this.rotate[2])\n    }\n\n    if (uniforms.u) uniforms.u_world = world\n\n    // Populate u_worldInverseTranspose - used for normals & shading\n    mat4.invert(<mat4>uniforms.u_worldInverseTranspose, world)\n    mat4.transpose(<mat4>uniforms.u_worldInverseTranspose, <mat4>uniforms.u_worldInverseTranspose)\n\n    // Populate u_worldViewProjection which is pretty fundamental\n    mat4.multiply(<mat4>uniforms.u_worldViewProjection, viewProjection, world)\n\n    // Render the renderable thing wrapped by this instance\n    this.renderable.render(gl, uniforms, programInfo)\n  }\n}\n","// ===== models/primitive.ts ======================================================\n// Main model class, holds a list of parts, each with a material\n// Models are parsed from OBJ files\n// Ben Coleman, 2023\n// ============================================================================\n\nimport { ProgramInfo, drawBufferInfo, setBuffersAndAttributes, setUniforms, primitives, BufferInfo } from 'twgl.js'\nimport { Renderable, UniformSet } from '../core/types.ts'\nimport { Material } from '../index.ts'\n\n/**\n * A simple primitive 3D object, like a sphere or cube\n */\nexport abstract class Primitive implements Renderable {\n  protected bufferInfo: BufferInfo | undefined\n  public material: Material\n  public tex: WebGLTexture | undefined\n\n  constructor() {\n    this.material = new Material()\n  }\n\n  render(gl: WebGL2RenderingContext, uniforms: UniformSet, programInfo: ProgramInfo): void {\n    if (!this.bufferInfo) return\n\n    this.material.apply(programInfo)\n\n    setBuffersAndAttributes(gl, programInfo, this.bufferInfo)\n    setUniforms(programInfo, uniforms)\n\n    drawBufferInfo(gl, this.bufferInfo)\n  }\n}\n\nexport class PrimitiveSphere extends Primitive {\n  constructor(gl: WebGL2RenderingContext, radius: number, subdivisionsH: number, subdivisionsV: number) {\n    super()\n\n    this.bufferInfo = primitives.createSphereBufferInfo(gl, radius, subdivisionsH, subdivisionsV)\n  }\n}\n\nexport class PrimitiveCube extends Primitive {\n  constructor(gl: WebGL2RenderingContext, size: number) {\n    super()\n\n    this.bufferInfo = primitives.createCubeBufferInfo(gl, size)\n  }\n}\n\nexport class PrimitivePlane extends Primitive {\n  constructor(gl: WebGL2RenderingContext, width: number, height: number, subdivisionsW: number, subdivisionsH: number) {\n    super()\n\n    this.bufferInfo = primitives.createPlaneBufferInfo(gl, width, height, subdivisionsW, subdivisionsH)\n  }\n}\n","#version 300 es\n\n// ============================================================================\n// Phong vertex shader\n// Ben Coleman, 2023\n// ============================================================================\n\nprecision highp float;\n\n// From vertex shader\nin vec3 v_normal;\nin vec2 v_texCoord;\nin vec4 v_position;\n\nuniform mat4 u_world;\nuniform mat4 u_camMatrix;\n\n// Material properties\nuniform vec4 u_matAmbient;\nuniform vec4 u_matDiffuse;\nuniform vec4 u_matSpecular;\nuniform float u_matShininess;\nuniform sampler2D u_matTexture;\n\n// Light properties\nuniform vec4 u_lightPosition;\nuniform vec4 u_lightColour;\nuniform vec4 u_ambientLight;\n\n// Output colour of this pixel/fragment\nout vec4 outColour;\n\n// lightCalc function returns two floats (packed into a vec2)\n// One for diffuse component of lighting, the second for specular\n// - normalN:          Surface normal (normalized)\n// - surfaceToLightN:  Vector towards light (normalized)\n// - halfVector:       Half vector towards camera (normalized)\n// - shininess:        Hardness or size of specular highlights\nvec2 lightCalc(vec3 normalN, vec3 surfaceToLightN, vec3 halfVector, float shininess) {\n  float NdotL = dot(normalN, surfaceToLightN);\n  float NdotH = dot(normalN, halfVector);\n\n  return vec2(\n    NdotL,\n    NdotL > 0.0\n      ? pow(max(0.0, NdotH), shininess)\n      : 0.0 // Specular term in y\n  );\n}\n\nvoid main(void ) {\n  vec3 surfaceToLight = u_lightPosition.xyz - v_position.xyz;\n  vec3 surfaceToView = (u_camMatrix[3] - u_world * v_position).xyz;\n  vec3 normalN = normalize(v_normal);\n  vec3 surfaceToLightN = normalize(surfaceToLight);\n  vec3 surfaceToViewN = normalize(surfaceToView);\n  vec3 halfVector = normalize(surfaceToLightN + surfaceToViewN);\n\n  vec2 l = lightCalc(normalN, surfaceToLightN, halfVector, u_matShininess);\n\n  vec4 diffuseColour = texture(u_matTexture, v_texCoord) * u_matDiffuse;\n\n  outColour =\n    u_ambientLight * diffuseColour * u_matAmbient +\n    diffuseColour * max(l.x, 0.0) * u_lightColour +\n    u_matSpecular * l.y * u_lightColour;\n}\n","#version 300 es\n\n// ============================================================================\n// Phong vertex shader\n// Ben Coleman, 2023\n// ============================================================================\n\nprecision highp float;\n\n// Input attributes from buffers\nin vec4 position;\nin vec3 normal;\nin vec2 texcoord;\n\nuniform mat4 u_worldViewProjection;\nuniform mat4 u_worldInverseTranspose;\nuniform mat4 u_world;\n\n// Output varying's to pass to fragment shader\nout vec2 v_texCoord;\nout vec3 v_normal;\nout vec4 v_position;\n\nvoid main() {\n  v_texCoord = texcoord;\n  v_normal = (u_worldInverseTranspose * vec4(normal, 0)).xyz;\n  v_position = u_world * position;\n\n  gl_Position = u_worldViewProjection * position;\n}\n","#version 300 es\n\n// ============================================================================\n// Gouraud fragment shader\n// Ben Coleman, 2023\n// ============================================================================\n\nprecision highp float;\n\n// From vertex shader\nin vec4 v_lightingDiffuse;\nin vec4 v_lightingSpecular;\nin vec2 v_texCoord;\n\nuniform sampler2D u_matTexture;\nuniform vec4 u_matDiffuse;\n\n// Output colour of this pixel/fragment\nout vec4 outColour;\n\nvoid main() {\n  // Tried to set the objectColour in the vertex shader, rather than here.\n  // But texture mapping + Gouraud shading, it looks terrible\n  vec4 objectColour = texture(u_matTexture, v_texCoord) * u_matDiffuse;\n\n  outColour = objectColour * v_lightingDiffuse + v_lightingSpecular;\n}\n","#version 300 es\n\n// ============================================================================\n// Gouraud vertex shader\n// Ben Coleman, 2023\n// ============================================================================\n\nprecision highp float;\n\n// Input attributes from buffers\nin vec4 position;\nin vec3 normal;\nin vec2 texcoord;\n\nuniform mat4 u_world;\nuniform mat4 u_camMatrix;\nuniform mat4 u_worldViewProjection;\nuniform mat4 u_worldInverseTranspose;\n\n// Material properties\nuniform vec4 u_matAmbient;\nuniform vec4 u_matSpecular;\nuniform float u_matShininess;\n\n// Light properties\nuniform vec4 u_lightPosition;\nuniform vec4 u_lightColour;\nuniform vec4 u_ambientLight;\n\nout vec4 v_lightingDiffuse;\nout vec4 v_lightingSpecular;\nout vec2 v_texCoord;\n\n// lightCalc function returns two floats (packed into a vec2)\n// One for diffuse component of lighting, the second for specular\n// - normalN:          Surface normal (normalized)\n// - surfaceToLightN:  Vector towards light (normalized)\n// - halfVector:       Half vector towards camera (normalized)\n// - shininess:        Hardness or size of specular highlights\nvec2 lightCalc(vec3 normalN, vec3 surfaceToLightN, vec3 halfVector, float shininess) {\n  float NdotL = dot(normalN, surfaceToLightN);\n  float NdotH = dot(normalN, halfVector);\n\n  return vec2(\n    NdotL,\n    NdotL > 0.0\n      ? pow(max(0.0, NdotH), shininess)\n      : 0.0 // Specular term in y\n  );\n}\n\nvoid main(void ) {\n  vec3 worldNormal = (u_worldInverseTranspose * vec4(normal, 0)).xyz;\n  vec4 worldPos = u_world * position;\n\n  vec3 surfaceToLight = u_lightPosition.xyz - worldPos.xyz;\n  vec3 surfaceToView = (u_camMatrix[3] - u_world * worldPos).xyz;\n  vec3 normalN = normalize(worldNormal);\n  vec3 surfaceToLightN = normalize(surfaceToLight);\n  vec3 surfaceToViewN = normalize(surfaceToView);\n  vec3 halfVector = normalize(surfaceToLightN + surfaceToViewN);\n\n  vec2 light = lightCalc(normalN, surfaceToLightN, halfVector, u_matShininess);\n\n  // Output lighting value for fragment shader to use, no color\n  v_lightingDiffuse = u_ambientLight * u_matAmbient + u_lightColour * max(light.x, 0.0);\n\n  // Pass specular in a seperate varying\n  v_lightingSpecular = u_lightColour * u_matSpecular * light.y;\n\n  // Pass through varying texture coordinate, so we can get the colour there\n  v_texCoord = texcoord;\n\n  gl_Position = u_worldViewProjection * position;\n}\n","#version 300 es\n\n// ============================================================================\n// Gouraud fragment shader with flat shading\n// Ben Coleman, 2023\n// ============================================================================\n\nprecision highp float;\n\n// From vertex shader\nflat in vec4 v_lightingDiffuse;\nflat in vec4 v_lightingSpecular;\nin vec2 v_texCoord;\n\nuniform sampler2D u_matTexture;\nuniform vec4 u_matDiffuse;\n\n// Output colour of this pixel/fragment\nout vec4 outColour;\n\nvoid main() {\n  // Tried to set the objectColour in the vertex shader, rather than here.\n  // But texture mapping + Gouraud shading, it looks terrible\n  vec4 objectColour = texture(u_matTexture, v_texCoord) * u_matDiffuse;\n\n  outColour = objectColour * v_lightingDiffuse + v_lightingSpecular;\n}\n","#version 300 es\n\n// ============================================================================\n// Gouraud vertex shader\n// Ben Coleman, 2023\n// ============================================================================\n\nprecision highp float;\n\n// Input attributes from buffers\nin vec4 position;\nin vec3 normal;\nin vec2 texcoord;\n\nuniform mat4 u_world;\nuniform mat4 u_camMatrix;\nuniform mat4 u_worldViewProjection;\nuniform mat4 u_worldInverseTranspose;\n\n// Material properties\nuniform vec4 u_matAmbient;\nuniform vec4 u_matSpecular;\nuniform float u_matShininess;\n\n// Light properties\nuniform vec4 u_lightPosition;\nuniform vec4 u_lightColour;\nuniform vec4 u_ambientLight;\n\nflat out vec4 v_lightingDiffuse;\nflat out vec4 v_lightingSpecular;\nout vec2 v_texCoord;\n\n// lightCalc function returns two floats (packed into a vec2)\n// One for diffuse component of lighting, the second for specular\n// - normalN:          Surface normal (normalized)\n// - surfaceToLightN:  Vector towards light (normalized)\n// - halfVector:       Half vector towards camera (normalized)\n// - shininess:        Hardness or size of specular highlights\nvec2 lightCalc(vec3 normalN, vec3 surfaceToLightN, vec3 halfVector, float shininess) {\n  float NdotL = dot(normalN, surfaceToLightN);\n  float NdotH = dot(normalN, halfVector);\n\n  return vec2(\n    NdotL,\n    NdotL > 0.0\n      ? pow(max(0.0, NdotH), shininess)\n      : 0.0 // Specular term in y\n  );\n}\n\nvoid main(void ) {\n  vec3 worldNormal = (u_worldInverseTranspose * vec4(normal, 0)).xyz;\n  vec4 worldPos = u_world * position;\n\n  vec3 surfaceToLight = u_lightPosition.xyz - worldPos.xyz;\n  vec3 surfaceToView = (u_camMatrix[3] - u_world * worldPos).xyz;\n  vec3 normalN = normalize(worldNormal);\n  vec3 surfaceToLightN = normalize(surfaceToLight);\n  vec3 surfaceToViewN = normalize(surfaceToView);\n  vec3 halfVector = normalize(surfaceToLightN + surfaceToViewN);\n\n  vec2 light = lightCalc(normalN, surfaceToLightN, halfVector, u_matShininess);\n\n  // Output lighting value for fragment shader to use, no color\n  v_lightingDiffuse = u_ambientLight * u_matAmbient + u_lightColour * max(light.x, 0.0);\n\n  // Pass specular in a seperate varying\n  v_lightingSpecular = u_lightColour * u_matSpecular * light.y;\n\n  // Pass through varying texture coordinate, so we can get the colour there\n  v_texCoord = texcoord;\n\n  gl_Position = u_worldViewProjection * position;\n}\n","{\n  \"name\": \"@benc-uk/gsots3d\",\n  \"version\": \"0.0.1-pre.1\",\n  \"description\": \"Getting S**t On The Screen in 3D. A twlg and WebGL2 wrapper for 3D graphics in the browser.\",\n  \"type\": \"module\",\n  \"publishConfig\": {\n    \"@benc-uk:registry\": \"https://npm.pkg.github.com\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/benc-uk/gsots3d.git\"\n  },\n  \"exports\": {\n    \".\": \"./dist/index.js\",\n    \"./parsers\": \"./dist/parsers/index.js\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --ext .ts src && prettier --check src && prettier --check shaders\",\n    \"lint-fix\": \"eslint --ext .ts src --fix && prettier --write src && prettier --write shaders\",\n    \"check\": \"tsc\",\n    \"build\": \"tsc && tsup\",\n    \"watch\": \"tsc && npm run build && run-when-changed --watch 'src/**/*.ts' --watch '**/*.glsl' --exec 'npm run build'\",\n    \"build-bundle\": \"tsc && tsup --config tsup.config-bundle.js && mv dist-bundle/index.js dist-bundle/gsots3d.js\",\n    \"watch-bundle\": \"tsc && npm run build-bundle && run-when-changed --watch 'src/**/*.ts' --watch '**/*.glsl' --exec 'npm run build-bundle'\",\n    \"clean\": \"rm -rf dist\",\n    \"docs\": \"typedoc --out docs --gitRevision main ./src/\",\n    \"examples\": \"vite --port 3000 --open /examples ./examples/\"\n  },\n  \"keywords\": [\n    \"webgl\",\n    \"graphics\",\n    \"3d\",\n    \"twgl\",\n    \"typescript\"\n  ],\n  \"files\": [\n    \"dist/\",\n    \"readme.md\"\n  ],\n  \"author\": \"Ben Coleman\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@typescript-eslint/eslint-plugin\": \"^5.60.1\",\n    \"@typescript-eslint/parser\": \"^5.60.1\",\n    \"eslint\": \"^8.44.0\",\n    \"prettier\": \"^2.8.8\",\n    \"prettier-plugin-glsl\": \"^0.0.10\",\n    \"run-when-changed\": \"^2.1.0\",\n    \"tsup\": \"^7.1.0\",\n    \"typedoc\": \"^0.24.8\",\n    \"typescript\": \"^5.1.6\",\n    \"vite\": \"^4.4.1\"\n  },\n  \"dependencies\": {\n    \"gl-matrix\": \"^3.4.3\",\n    \"loglevel\": \"^1.8.1\",\n    \"twgl.js\": \"^5.3.1\"\n  }\n}\n","// ===== material.ts ==========================================================\n// Represents a material, with all the properties from the MTL file\n// Ben Coleman, 2023\n// ============================================================================\n\nimport { ProgramInfo, createTexture, setUniforms } from 'twgl.js'\nimport { RGB, UniformSet } from '../core/types.ts'\nimport { MtlMaterial } from '../parsers/mtl-parser.ts'\nimport { getGl } from '../core/gl.ts'\n\nconst UNIFORM_PREFIX = 'u_mat'\n\nexport class Material {\n  public diffuse?: RGB\n  public specular?: RGB\n  public shininess?: number\n  public ambient?: RGB\n  public emissive?: RGB\n\n  public texture?: WebGLTexture\n\n  /**\n   * Create a new material with default diffuse colour\n   */\n  constructor() {\n    this.diffuse = [1, 1, 1]\n    this.specular = undefined\n    this.shininess = undefined\n    this.ambient = undefined\n    this.emissive = undefined\n\n    const gl = getGl()\n    if (!gl) return\n\n    // Solid white texture for plain colours\n    this.texture = createTexture(gl, {\n      min: gl.NEAREST,\n      mag: gl.NEAREST,\n      src: [255, 255, 255, 255],\n    })\n  }\n\n  /**\n   * Create a new material from a raw MTL material\n   */\n  public static fromMtl(rawMtl: MtlMaterial) {\n    const m = new Material()\n\n    m.diffuse = rawMtl.kd\n    m.specular = rawMtl.ks\n    m.shininess = rawMtl.ns\n    m.ambient = rawMtl.ka\n    m.emissive = rawMtl.ke\n\n    return m\n  }\n\n  /**\n   * Create a basic Material with a solid diffuse colour\n   */\n  public static createDiffuse(r: number, g: number, b: number) {\n    const m = new Material()\n    m.diffuse = [r, g, b]\n\n    return m\n  }\n\n  /**\n   * Create a new Material with a texture map loaded from a URL\n   */\n  public static createTexture(url: string, filter = true) {\n    const m = new Material()\n    const gl = getGl()\n    if (!gl) return m\n\n    gl.LINEAR_MIPMAP_LINEAR\n    m.texture = createTexture(gl, {\n      min: filter ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST,\n      mag: filter ? gl.LINEAR : gl.NEAREST,\n      src: url,\n    })\n\n    return m\n  }\n\n  /** Create a simple RED Material */\n  static get RED() {\n    const m = Material.createDiffuse(1.0, 0.0, 0.0)\n    return m\n  }\n\n  /** Create a simple GREEN Material */\n  static get GREEN() {\n    return Material.createDiffuse(0.0, 1.0, 0.0)\n  }\n\n  /** Create a simple BLUE Material */\n  static get BLUE() {\n    const m = Material.createDiffuse(0.0, 0.0, 1.0)\n\n    return m\n  }\n\n  /**\n   * Applies the material to the given program as a set of uniforms\n   * Each uniform is prefixed with `u_mat`, e.g. `u_matDiffuse`\n   */\n  public apply(programInfo: ProgramInfo) {\n    setUniforms(programInfo, this.Uniforms)\n  }\n\n  /**\n   * Return a map of uniforms for this material, with a prefix\n   */\n  public get Uniforms(): UniformSet {\n    return {\n      [`${UNIFORM_PREFIX}Texture`]: this.texture ? this.texture : null,\n      [`${UNIFORM_PREFIX}Shininess`]: this.shininess ? this.shininess : 0,\n      [`${UNIFORM_PREFIX}Diffuse`]: this.diffuse ? [...this.diffuse, 1] : [1, 1, 1, 1],\n      [`${UNIFORM_PREFIX}Specular`]: this.specular ? [...this.specular, 1] : [0, 0, 0, 1],\n      [`${UNIFORM_PREFIX}Ambient`]: this.ambient ? [...this.ambient, 1] : [1, 1, 1, 1],\n    } as UniformSet\n  }\n}\n","// ===== models/model.ts ======================================================\n// Main model class, holds a list of parts, each with a material\n// Models are parsed from OBJ files\n// Ben Coleman, 2023\n// ============================================================================\n\nimport {\n  BufferInfo,\n  ProgramInfo,\n  createBufferInfoFromArrays,\n  drawBufferInfo,\n  setBuffersAndAttributes,\n  setUniforms,\n} from 'twgl.js'\nimport log from 'loglevel'\n\nimport { Material } from '../render/material.ts'\nimport { parseMTL } from '../parsers/mtl-parser.ts'\nimport { parseOBJ } from '../parsers/obj-parser.ts'\nimport { fetchFile } from '../utils/files.ts'\nimport { getGl } from '../core/gl.ts'\nimport { Renderable, UniformSet } from '../core/types.ts'\n\n/**\n * Holds a 3D model, as a list of parts, each with a material\n * Plus map of named materials\n */\nexport class Model implements Renderable {\n  public readonly name: string\n  public readonly parts = [] as ModelPart[]\n  public readonly materials = {} as Record<string, Material>\n\n  /**\n   * Constructor is private, use static `parse()` method instead\n   */\n  private constructor(name: string) {\n    this.name = name\n  }\n\n  render(gl: WebGL2RenderingContext, uniforms: UniformSet, programInfo: ProgramInfo): void {\n    for (const part of this.parts) {\n      const bufferInfo = part.bufferInfo\n\n      const material = this.materials[part.materialName]\n      material.apply(programInfo)\n\n      setBuffersAndAttributes(gl, programInfo, bufferInfo)\n      setUniforms(programInfo, uniforms)\n\n      drawBufferInfo(gl, bufferInfo)\n    }\n  }\n\n  /**\n   * Parse an OBJ file & MTL material libraries, returns a new Model\n   *\n   * @param {string} path - The path to the OBJ file\n   * @param {string} objFilename - The name of the OBJ file\n   * @returns {Promise<Model>}\n   */\n  static async parse(path = '.', objFilename: string) {\n    // Create a new model with the name of the file\n    const name = objFilename.split('.')[0]\n    const model = new Model(name)\n\n    // Load the OBJ file from URL\n    let objFile: string\n    try {\n      objFile = await fetchFile(`${path}/${objFilename}`)\n    } catch (err) {\n      throw new Error(`💥 Unable to load model ${objFilename}`)\n    }\n\n    // Try to parse the OBJ file\n    const objData = parseOBJ(objFile)\n    if (!objData.geometries || objData.geometries.length === 0) {\n      throw new Error(`💥 Error parsing model ${objFilename}`)\n    }\n\n    // We assume that the OBJ file has a SINGLE material library\n    // This is a good assumption for nearly all files I've seen\n    if (objData.matLibNames && objData.matLibNames.length > 0) {\n      try {\n        const mtlFile = await fetchFile(`${path}/${objData.matLibNames[0]}`)\n        const materialsRawList = parseMTL(mtlFile)\n\n        for (const [matName, matRaw] of materialsRawList) {\n          model.materials[matName] = Material.fromMtl(matRaw)\n        }\n      } catch (err) {\n        console.warn(`Unable to load material library ${objData.matLibNames[0]}`)\n      }\n    }\n\n    // Fall back default material, some blueish color\n    model.materials['__default'] = new Material()\n\n    const gl = getGl()\n\n    if (!gl) {\n      throw new Error('Unable to get WebGL context')\n    }\n\n    for (const g of objData.geometries) {\n      const bufferInfo = createBufferInfoFromArrays(gl, g.data)\n      model.parts.push(new ModelPart(bufferInfo, g.material))\n    }\n\n    log.debug(\n      `♟️ Model '${objFilename}' loaded with ${model.parts.length} parts, ${\n        Object.keys(model.materials).length\n      } materials`\n    )\n\n    return model\n  }\n}\n\n/**\n * Holds part of a model, as the WebGL buffers needed to render it\n * Plus the material name associated with this part\n */\nclass ModelPart {\n  public readonly bufferInfo: BufferInfo\n  public readonly materialName: string\n\n  /**\n   * @param {twgl.BufferInfo} bufferInfo - WebGL buffer info for this model part\n   * @param {string} materialName - Name of the material associated with this part\n   */\n  constructor(bufferInfo: BufferInfo, materialName: string) {\n    this.bufferInfo = bufferInfo\n    this.materialName = materialName\n  }\n}\n","// ===== mtl-parser.mjs ==========================================================\n// A simple MTL parser\n// Taken from https://webglfundamentals.org/webgl/lessons/webgl-load-obj-w-mtl.html\n// Ben Coleman, 2023\n// ===============================================================================\n\n/**\n * A \"raw\" material fetched from the MTL parser, don't use this directly\n */\nexport type MtlMaterial = {\n  ns?: number\n  ka?: [number, number, number]\n  kd?: [number, number, number]\n  ks?: [number, number, number]\n  ke?: [number, number, number]\n  ni?: number\n  d?: number\n  illum?: number\n}\n\n/**\n * Parse an MTL file returning a map of materials.\n * The returned {@link typescript!MtlMaterial} should be passed to new Material() to create a material\n *\n * @param {string} mtlFile - The MTL file as a string\n * @returns {Map<string, MtlMaterial>} - A map of materials\n */\nexport function parseMTL(mtlFile: string): Map<string, MtlMaterial> {\n  const materials = new Map<string, MtlMaterial>()\n  let material = {} as MtlMaterial\n\n  const keywords = {\n    newmtl(_, unparsedArgs: string) {\n      material = {} as MtlMaterial\n      materials.set(unparsedArgs, material)\n    },\n\n    Ns(parts) {\n      material.ns = parseFloat(parts[0])\n    },\n    Ka(parts) {\n      material.ka = parts.map(parseFloat)\n    },\n    Kd(parts) {\n      material.kd = parts.map(parseFloat)\n    },\n    Ks(parts) {\n      material.ks = parts.map(parseFloat)\n    },\n    Ke(parts) {\n      material.ke = parts.map(parseFloat)\n    },\n    Ni(parts) {\n      material.ni = parseFloat(parts[0])\n    },\n    d(parts) {\n      material.d = parseFloat(parts[0])\n    },\n    illum(parts) {\n      material.illum = parseInt(parts[0])\n    },\n  }\n\n  const keywordRE = /(\\w*)(?: )*(.*)/\n  const lines = mtlFile.split('\\n')\n\n  for (let lineNo = 0; lineNo < lines.length; ++lineNo) {\n    const line = lines[lineNo].trim()\n    if (line === '' || line.startsWith('#')) {\n      continue\n    }\n\n    const m = keywordRE.exec(line)\n    if (!m) {\n      continue\n    }\n\n    const [, keyword, unparsedArgs] = m\n    const parts = line.split(/\\s+/).slice(1)\n\n    const handler = keywords[keyword]\n    if (!handler) {\n      console.warn('unhandled keyword:', keyword)\n      continue\n    }\n\n    handler(parts, unparsedArgs)\n  }\n\n  return materials\n}\n","// ===== obj-parser.mjs ==========================================================\n// A simple OBJ parser, works well, but FAR from comprehensive\n// Taken from https://webglfundamentals.org/webgl/lessons/webgl-obj-loader.html\n// Ben Coleman, 2023\n// ===============================================================================\n\nconst keywordRE = /(\\w*)(?: )*(.*)/\n\nexport type ParseResult = {\n  matLibNames: string[]\n  geometries: Geometry[]\n}\n\n/**\n * Used internally by OBJ parser\n */\nexport type Geometry = {\n  material: string\n  data: {\n    position: number[]\n    texcoord?: number[]\n    normal: number[]\n  }\n}\n\n/**\n * Parse an OBJ file returning a list of geometries and materials libs\n *\n * @param {string} objFile - The OBJ file as a string\n * @returns {ParseResult} An object containing the geometries and material libs\n */\nexport function parseOBJ(objFile: string): ParseResult {\n  const lines = objFile.split('\\n')\n\n  const objPositions = [[0, 0, 0]]\n  const objTexcoords = [[0, 0]]\n  const objNormals = [[0, 0, 0]]\n\n  // same order as `f` indices\n  const objVertexData = [objPositions, objTexcoords, objNormals]\n\n  // same order as `f` indices\n  let webglVertexData = [\n    [], // position\n    [], // texcoord\n    [], // normal\n  ] as number[][]\n\n  const geometries = Array<Geometry>()\n  let geometry = {} as Geometry\n  let material = '__default'\n  const materialLibs = Array<string>()\n\n  const keywords = {\n    v(parts) {\n      objPositions.push(parts.map(parseFloat))\n    },\n\n    vn(parts) {\n      objNormals.push(parts.map(parseFloat))\n    },\n\n    vt(parts) {\n      objTexcoords.push(parts.map(parseFloat))\n    },\n\n    f(parts) {\n      setGeometry()\n      const numTriangles = parts.length - 2\n      for (let tri = 0; tri < numTriangles; ++tri) {\n        addVertex(parts[0])\n        addVertex(parts[tri + 1])\n        addVertex(parts[tri + 2])\n      }\n    },\n\n    usemtl(_, unparsedArgs: string) {\n      material = unparsedArgs\n      newGeometry()\n    },\n\n    mtllib(_, unparsedArgs: string) {\n      materialLibs.push(unparsedArgs)\n    },\n\n    // Not used, but suppress warnings\n    s() {\n      return\n    },\n\n    o() {\n      return\n    },\n  }\n\n  /**\n   * Updates webglVertexData per vertex\n   *\n   * @param {string} vert - String in the form of \"v/vt/vn\" as per OBJ spec\n   */\n  function addVertex(vert: string) {\n    const ptn = vert.split('/')\n\n    ptn.forEach((objIndexStr, i) => {\n      if (!objIndexStr) {\n        return\n      }\n\n      const objIndex = parseInt(objIndexStr)\n      const index = objIndex + (objIndex >= 0 ? 0 : objVertexData[i].length)\n\n      webglVertexData[i].push(...objVertexData[i][index])\n    })\n  }\n\n  /**\n   *\n   */\n  function newGeometry() {\n    // If there is an existing geometry and it's not empty then start a new one.\n    if (geometry.material) {\n      geometry = {} as Geometry\n    }\n  }\n\n  /**\n   *\n   */\n  function setGeometry() {\n    if (!geometry.material) {\n      const position = [] as number[]\n      const texcoord = [] as number[]\n      const normal = [] as number[]\n\n      webglVertexData = [position, texcoord, normal]\n\n      /** @type {Geometry} */\n      geometry = {\n        material,\n        data: {\n          position,\n          texcoord,\n          normal,\n        },\n      }\n\n      geometries.push(geometry)\n    }\n  }\n\n  for (let lineNo = 0; lineNo < lines.length; ++lineNo) {\n    const line = lines[lineNo].trim()\n    if (line === '' || line.startsWith('#')) {\n      continue\n    }\n\n    const m = keywordRE.exec(line)\n    if (!m) {\n      continue\n    }\n\n    const [, keyword, unparsedArgs] = m\n    const parts = line.split(/\\s+/).slice(1)\n\n    const handler = keywords[keyword]\n    if (!handler) {\n      console.warn('unhandled keyword:', keyword, 'at line', lineNo + 1)\n      continue\n    }\n\n    handler(parts, unparsedArgs)\n  }\n\n  // FIX: For those OBJ files that don't have texcoord data\n  for (const g of geometries) {\n    if (g.data.texcoord && g.data.texcoord.length <= 0) {\n      delete g.data.texcoord\n    }\n  }\n\n  // Return pair of array of geometry & array of material library names\n  return {\n    matLibNames: materialLibs,\n    geometries: geometries,\n  } as ParseResult\n}\n","// ===== files.ts =============================================================\n// File loading utilities\n// Ben Coleman, 2023\n// ============================================================================\n\ntype Shader = {\n  vertex: string\n  fragment: string\n}\n\n/**\n * Fetch a file from the server\n *\n * @param {string} path - URL path to file\n * @returns {Promise<string>} File contents as a string\n */\nexport async function fetchFile(filePath: string) {\n  const resp = await fetch(filePath)\n\n  if (!resp.ok) {\n    throw new Error(`File fetch failed: ${resp.statusText}`)\n  }\n\n  const text = await resp.text()\n  return text\n}\n\n/**\n * Fetch a pair of shaders from the server\n *\n * @param {string} vertPath - URL path to vertex shader\n * @param {string} fragPath - URL path to fragment shader\n * @returns {Promise<Shader>} Pair of shaders as strings\n */\nexport async function fetchShaders(vertPath, fragPath) {\n  const vsResp = await fetch(vertPath)\n  const fsResp = await fetch(fragPath)\n\n  if (!vsResp.ok || !fsResp.ok) {\n    throw new Error(`Fetch failed - vertex: ${vsResp.statusText}, fragment: ${fsResp.statusText}`)\n  }\n\n  const vsText = await vsResp.text()\n  const fsText = await fsResp.text()\n\n  return { vertex: vsText, fragment: fsText } as Shader\n}\n"],"mappings":"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","names":["require_loglevel","__commonJSMin","exports","module","root","definition","noop","undefinedType","isIE","logMethods","bindMethod","obj","methodName","method","traceForIE","realMethod","replaceLoggingMethods","level","loggerName","i","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","name","defaultLevel","factory","self","currentLevel","storageKey","persistLevelIfPossible","levelNum","levelName","getPersistedLevel","storedLevel","cookie","location","clearPersistedLevel","persist","initialLevel","defaultLogger","_loggersByName","logger","_log","import_loglevel","setLogLevel","level","log","import_loglevel","VecType","create$1","x","y","z","dst","VecType","add","a","b","multiply$1","a","b","dst","VecType","MatType","identity","dst","MatType","inverse","m","dst","MatType","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t1","t2","t3","d","transformPoint","m","v","dst","create$1","v0","v1","v2","d","transformDirection","BYTE$2","UNSIGNED_BYTE$3","SHORT$2","UNSIGNED_SHORT$3","INT$3","UNSIGNED_INT$3","FLOAT$3","UNSIGNED_SHORT_4_4_4_4$1","UNSIGNED_SHORT_5_5_5_1$1","UNSIGNED_SHORT_5_6_5$1","HALF_FLOAT$1","UNSIGNED_INT_2_10_10_10_REV$1","UNSIGNED_INT_10F_11F_11F_REV$1","UNSIGNED_INT_5_9_9_9_REV$1","FLOAT_32_UNSIGNED_INT_24_8_REV$1","UNSIGNED_INT_24_8$1","glTypeToTypedArray","tt","getGLTypeForTypedArray","typedArray","getGLTypeForTypedArrayType","typedArrayType","getTypedArrayTypeForGLType","type","CTOR","isArrayBuffer$1","a","copyNamedProperties","names","src","dst","name","value","error$1","args","isTypeWeakMaps","isType","object","type","weakMap","isOfType","s","isBuffer","gl","isTexture","gl","isType","isSampler","STATIC_DRAW","ARRAY_BUFFER$1","ELEMENT_ARRAY_BUFFER$2","BUFFER_SIZE","BYTE$1","UNSIGNED_BYTE$2","SHORT$1","UNSIGNED_SHORT$2","INT$2","UNSIGNED_INT$2","FLOAT$2","defaults$2","setBufferFromTypedArray","gl","type","buffer","array","drawType","STATIC_DRAW","createBufferFromTypedArray","typedArray","isBuffer","ARRAY_BUFFER$1","isIndices","name","getNormalizationForTypedArrayType","typedArrayType","getArray$1","texcoordRE","colorRE","guessNumComponentsFromName","length","numComponents","getNumComponents$1","arrayName","numValues","makeTypedArray","isArrayBuffer$1","Type","typedArrayTypeFromGLTypeOrTypedArrayCtor","glTypeFromGLTypeOrTypedArrayType","glTypeOrTypedArrayCtor","getGLTypeForTypedArrayType","FLOAT$2","getTypedArrayTypeForGLType","attribBufferFromBuffer","attribBufferFromSize","arrayType","numBytes","attribBufferFromArrayLike","getGLTypeForTypedArray","createAttribsFromArrays","arrays","attribs","attribName","defaults$2","fn","normalization","getBytesPerValueForGLType","gl","type","BYTE$1","UNSIGNED_BYTE$2","SHORT$1","UNSIGNED_SHORT$2","INT$2","UNSIGNED_INT$2","FLOAT$2","positionKeys","getNumElementsFromNonIndexedArrays","arrays","key","ii","array","length","getArray$1","numComponents","getNumComponents$1","numElements","getNumElementsFromAttributes","attribs","defaults$2","attrib","ARRAY_BUFFER$1","numBytes","BUFFER_SIZE","bytesPerValue","totalElements","createBufferInfoFromArrays","srcBufferInfo","newAttribs","createAttribsFromArrays","bufferInfo","indices","newIndices","makeTypedArray","createBufferFromTypedArray","ELEMENT_ARRAY_BUFFER$2","getGLTypeForTypedArray","createBufferFromArray","arrayName","typedArray","createBuffersFromArrays","buffers","getArray","getArray$1","getNumComponents","getNumComponents$1","augmentTypedArray","typedArray","numComponents","cursor","ii","value","isArrayBuffer$1","jj","opt_index","createAugmentedTypedArray","numElements","opt_type","Type","allButIndices","name","deindexVertices","vertices","indices","newVertices","expandToUnindexed","channel","srcBuffer","dstBuffer","offset","flattenNormals","normals","numNormals","nax","nay","naz","nbx","nby","nbz","ncx","ncy","ncz","nx","ny","nz","length","applyFuncToV3Array","array","matrix","fn","len","tmp","transformNormal","mi","v","dst","create$1","v0","v1","v2","reorientDirections","transformDirection","reorientNormals","inverse","reorientPositions","transformPoint","reorientVertices","arrays","createXYQuadVertices","size","xOffset","yOffset","createPlaneVertices","width","depth","subdivisionsWidth","subdivisionsDepth","identity","numVertices","positions","texcoords","z","x","u","numVertsAcross","createSphereVertices","radius","subdivisionsAxis","subdivisionsHeight","opt_startLatitudeInRadians","opt_endLatitudeInRadians","opt_startLongitudeInRadians","opt_endLongitudeInRadians","latRange","longRange","y","theta","phi","sinTheta","cosTheta","sinPhi","cosPhi","ux","uy","uz","numVertsAround","CUBE_FACE_INDICES","createCubeVertices","k","cornerVertices","faceNormals","uvCoords","f","faceIndices","position","normal","uv","createTruncatedConeVertices","bottomRadius","topRadius","height","radialSubdivisions","verticalSubdivisions","opt_topCap","opt_bottomCap","topCap","bottomCap","extra","vertsAroundEdge","slant","cosSlant","sinSlant","start","end","yy","ringRadius","sin","cos","expandRLEData","rleData","padding","data","runLength","element","create3DFVertices","colors","numVerts","createCrescentVertices","verticalRadius","outerRadius","innerRadius","thickness","subdivisionsDown","startOffset","endOffset","subdivisionsThick","offsetRange","lerp","a","b","s","createArc","arcRadius","normalMult","normalAdd","uMult","uAdd","uBack","xBack","angle","c","px","py","pz","n","add","multiply$1","createSurface","leftArcOffset","rightArcOffset","numVerticesDown","createCylinderVertices","createTorusVertices","bodySubdivisions","startAngle","endAngle","range","radialParts","bodyParts","slice","sliceAngle","sliceSin","ring","ringAngle","xSin","zCos","nextRingIndex","nextSliceIndex","createDiscVertices","divisions","stacks","stackPower","firstIndex","radiusSpan","pointsPerStack","stack","stackRadius","i","d","randInt","makeRandomVertexColors","options","vColors","rand","ndx","numVertsPerColor","numSets","color","createBufferFunc","gl","createBuffersFromArrays","createBufferInfoFunc","createBufferInfoFromArrays","arraySpecPropertyNames","copyElements","src","dstNdx","createArrayOfSameType","srcArray","arraySrc","newArray","newArraySpec","copyNamedProperties","concatVertices","arrayOfArrays","names","baseName","arrayInfo","getLengthOfCombinedArrays","arraySpec","copyArraysToNewArray","base","baseIndex","newArrays","info","duplicateVertices","create3DFBufferInfo","create3DFBuffers","createCubeBufferInfo","createCubeBuffers","createPlaneBufferInfo","createPlaneBuffers","createSphereBufferInfo","createSphereBuffers","createTruncatedConeBufferInfo","createTruncatedConeBuffers","createXYQuadBufferInfo","createXYQuadBuffers","createCrescentBufferInfo","createCrescentBuffers","createCylinderBufferInfo","createCylinderBuffers","createTorusBufferInfo","createTorusBuffers","createDiscBufferInfo","createDiscBuffers","createCresentBufferInfo","createCresentBuffers","createCresentVertices","primitives","isWebGL2","glEnumToString","haveEnumsForType","enums","addEnums","gl","type","key","existing","value","defaults$1","isArrayBuffer","isArrayBuffer$1","getShared2DContext","s_ctx","ALPHA","RGB","RGBA$1","LUMINANCE","LUMINANCE_ALPHA","DEPTH_COMPONENT$1","DEPTH_STENCIL$1","CLAMP_TO_EDGE$1","NEAREST","LINEAR$1","TEXTURE_2D$2","TEXTURE_CUBE_MAP$1","TEXTURE_3D$1","TEXTURE_2D_ARRAY$1","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","TEXTURE_BASE_LEVEL","TEXTURE_MAX_LEVEL","UNPACK_ALIGNMENT","UNPACK_ROW_LENGTH","UNPACK_IMAGE_HEIGHT","UNPACK_SKIP_PIXELS","UNPACK_SKIP_ROWS","UNPACK_SKIP_IMAGES","UNPACK_COLORSPACE_CONVERSION_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_Y_WEBGL","R8","R8_SNORM","R16F","R32F","R8UI","R8I","RG16UI","RG16I","RG32UI","RG32I","RG8","RG8_SNORM","RG16F","RG32F","RG8UI","RG8I","R16UI","R16I","R32UI","R32I","RGB8","SRGB8","RGB565$1","RGB8_SNORM","R11F_G11F_B10F","RGB9_E5","RGB16F","RGB32F","RGB8UI","RGB8I","RGB16UI","RGB16I","RGB32UI","RGB32I","RGBA8","SRGB8_ALPHA8","RGBA8_SNORM","RGB5_A1$1","RGBA4$1","RGB10_A2","RGBA16F","RGBA32F","RGBA8UI","RGBA8I","RGB10_A2UI","RGBA16UI","RGBA16I","RGBA32I","RGBA32UI","DEPTH_COMPONENT16$1","DEPTH_COMPONENT24$1","DEPTH_COMPONENT32F$1","DEPTH32F_STENCIL8$1","DEPTH24_STENCIL8$1","BYTE","UNSIGNED_BYTE$1","SHORT","UNSIGNED_SHORT$1","INT$1","UNSIGNED_INT$1","FLOAT$1","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","HALF_FLOAT_OES","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","RG","RG_INTEGER","RED","RED_INTEGER","RGB_INTEGER","RGBA_INTEGER","formatInfo","f","s_textureInternalFormatInfo","getTextureInternalFormatInfo","internalFormat","info","bytesPerElement","ndx","type","getBytesPerElementForInternalFormat","getFormatAndTypeForInternalFormat","isPowerOf2","value","canGenerateMipmap","gl","width","height","isWebGL2","canFilter","getTextureTypeForArrayType","gl","src","defaultType","isArrayBuffer","getGLTypeForTypedArray","UNSIGNED_BYTE$1","guessDimensions","target","width","height","numElements","size","TEXTURE_CUBE_MAP$1","setPackState","gl","options","UNPACK_COLORSPACE_CONVERSION_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_Y_WEBGL","setSkipStateToDefault","UNPACK_ALIGNMENT","isWebGL2","UNPACK_ROW_LENGTH","UNPACK_IMAGE_HEIGHT","UNPACK_SKIP_PIXELS","UNPACK_SKIP_ROWS","UNPACK_SKIP_IMAGES","setTextureSamplerParameters","target","parameteriFn","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_3D$1","isSampler","TEXTURE_WRAP_R","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","TEXTURE_BASE_LEVEL","TEXTURE_MAX_LEVEL","setTextureParameters","tex","TEXTURE_2D$2","make1Pixel","color","defaults$1","isArrayBuffer","setTextureFilteringForSize","gl","tex","options","width","height","internalFormat","RGBA$1","target","TEXTURE_2D$2","canGenerateMipmap","filtering","canFilter","LINEAR$1","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE$1","TEXTURE_WRAP_T","shouldAutomaticallySetTextureFilteringForSize","getCubeFaceOrder","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","getCubeFacesWithNdx","facesWithNdx","face","ndx","a","b","setTextureFromElement","element","level","formatType","getFormatAndTypeForInternalFormat","format","type","setPackState","TEXTURE_CUBE_MAP$1","imgWidth","imgHeight","size","slices","ctx","getShared2DContext","f","xOffset","yOffset","imageBitmap","TEXTURE_3D$1","TEXTURE_2D_ARRAY$1","smallest","largest","depth","xMult","yMult","UNPACK_ALIGNMENT","UNPACK_ROW_LENGTH","UNPACK_IMAGE_HEIGHT","UNPACK_SKIP_IMAGES","d","srcX","srcY","UNPACK_SKIP_PIXELS","UNPACK_SKIP_ROWS","setSkipStateToDefault","setTextureParameters","noop","urlIsSameOrigin","url","localOrigin","setToAnonymousIfUndefinedAndURLIsNotSameOrigin","crossOrigin","loadImage","callback","img","clearEventHandlers","onError","onLoad","msg","error$1","err","bm","cb","response","blob","bitmap","e","isTexImageSource","obj","loadAndUseImage","setTextureTo1PixelColor","ii","UNSIGNED_BYTE$1","loadTextureFromUrl","loadCubemapFromUrls","urls","numToLoad","errors","faces","imgs","uploadImg","faceTarget","otherTarget","loadSlicesFromUrls","firstImage","slice","s","src","setTextureFromArray","getTextureTypeForArrayType","Type","getTypedArrayTypeForGLType","bytesPerElement","getBytesPerElementForInternalFormat","numElements","glEnumToString","dimensions","guessDimensions","elementsPerElement","faceSize","offset","data","setEmptyTexture","createTexture","error","error$1","getElementById","id","TEXTURE0","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER$1","COMPILE_STATUS","LINK_STATUS","FRAGMENT_SHADER","VERTEX_SHADER","SEPARATE_ATTRIBS","ACTIVE_UNIFORMS","ACTIVE_ATTRIBUTES","TRANSFORM_FEEDBACK_VARYINGS","ACTIVE_UNIFORM_BLOCKS","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2x3","FLOAT_MAT2x4","FLOAT_MAT3x2","FLOAT_MAT3x4","FLOAT_MAT4x2","FLOAT_MAT4x3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_2D$1","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","typeMap","getBindPointForSamplerType","gl","type","floatSetter","location","v","floatArraySetter","floatVec2Setter","floatVec3Setter","floatVec4Setter","intSetter","intArraySetter","intVec2Setter","intVec3Setter","intVec4Setter","uintSetter","uintArraySetter","uintVec2Setter","uintVec3Setter","uintVec4Setter","floatMat2Setter","floatMat3Setter","floatMat4Setter","floatMat23Setter","floatMat32Setter","floatMat24Setter","floatMat42Setter","floatMat34Setter","floatMat43Setter","samplerSetter","unit","bindPoint","isWebGL2","textureOrPair","texture","sampler","isTexture","TEXTURE0","samplerArraySetter","size","units","ii","textures","index","floatAttribSetter","b","ARRAY_BUFFER","intAttribSetter","uintAttribSetter","matAttribSetter","typeInfo","defaultSize","count","numComponents","stride","normalize","offset","rowOffset","i","attrTypeMap","errorRE","addLineNumbersWithError","src","log","lineOffset","matches","lineNoToErrorMap","m","ndx","lineNo","next","end","msg","line","err","spaceRE","prepShaderSource","shaderSource","reportError","progOptions","checkShaderStatus","shaderType","shader","errFn","error","lastError","glEnumToString","getProgramOptions","opt_attribs","opt_locations","opt_errorCallback","transformFeedbackVaryings","transformFeedbackMode","callback","opt","errorCallback","errors","options","args","attribLocations","attrib","defaultShaderType","getShaderTypeFromScriptType","scriptType","deleteProgramAndShaders","program","notThese","shaders","wait","ms","resolve","createProgramNoCheck","programOptions","elem","getElementById","loc","varyings","createProgram","shaderSet","hasErrors","getProgramErrors","waitForProgramLinkCompletionAsync","wrapCallbackFnToAsyncFn","fn","arg1","reject","createProgramAsync","createProgramInfoAsync","createProgramInfo","ext","checkFn","waitTime","waitForAllProgramsLinkCompletionAsync","programs","_","createProgramFromSources","gl","shaderSources","opt_attribs","opt_locations","opt_errorCallback","createProgram","isBuiltIn","info","name","tokenRE","isDigit","s","addSetterToUniformTree","fullPath","setter","node","uniformSetters","tokens","tokenNdx","path","token","isArrayIndex","accessor","isArray","child","value","setUniformTree","createUniformSetters","program","textureUnit","createUniformSetter","uniformInfo","location","type","typeInfo","typeMap","unit","uniformTree","numUniforms","ACTIVE_UNIFORMS","ii","createTransformFeedbackInfo","numVaryings","TRANSFORM_FEEDBACK_VARYINGS","varying","createUniformBlockSpecFromProgram","gl","program","numUniforms","ACTIVE_UNIFORMS","uniformData","uniformIndices","ii","uniformInfo","pair","pname","key","value","ndx","blockSpecs","numUniformBlocks","ACTIVE_UNIFORM_BLOCKS","name","blockSpec","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","setUniformTree","tree","values","name","prop","setUniforms","setters","args","actualSetters","numArgs","aNdx","numValues","ii","setter","createAttributeSetters","gl","program","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","ii","attribInfo","isBuiltIn","index","typeInfo","attrTypeMap","setter","setAttributes","setters","buffers","name","setBuffersAndAttributes","programInfo","ELEMENT_ARRAY_BUFFER$1","createProgramInfoFromProgram","uniformSetters","createUniformSetters","isWebGL2","createUniformBlockSpecFromProgram","createTransformFeedbackInfo","notIdRE","createProgramInfo","shaderSources","opt_attribs","opt_locations","opt_errorCallback","progOptions","getProgramOptions","errors","source","script","getElementById","err","reportError","origCallback","createProgramFromSources","checkAllPrograms","programs","programSpecs","noDeleteShadersSet","programOptions","options","spec","getProgramErrors","shaders","shader","createPrograms","createProgramNoCheck","waitForAllProgramsLinkCompletionAsync","createProgramInfos","createProgramInfosForPrograms","createProgramsAsync","wrapCallbackFnToAsyncFn","createProgramInfosAsync","TRIANGLES","UNSIGNED_SHORT","drawBufferInfo","gl","bufferInfo","type","count","offset","instanceCount","indices","elementType","numElements","DEPTH_COMPONENT","DEPTH_COMPONENT24","DEPTH_COMPONENT32F","DEPTH24_STENCIL8","DEPTH32F_STENCIL8","RGBA4","RGB5_A1","RGB565","DEPTH_COMPONENT16","STENCIL_INDEX","STENCIL_INDEX8","DEPTH_STENCIL","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","attachmentsByFormat","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","STENCIL_INDEX","STENCIL_ATTACHMENT","STENCIL_INDEX8","DEPTH_COMPONENT","DEPTH_ATTACHMENT","DEPTH_COMPONENT16","DEPTH_COMPONENT24","DEPTH_COMPONENT32F","DEPTH24_STENCIL8","DEPTH32F_STENCIL8","renderbufferFormats","RGBA4","RGB5_A1","RGB565","DEPTH_STENCIL","DEPTH_COMPONENT16","STENCIL_INDEX","STENCIL_INDEX8","resizeCanvasToDisplaySize","canvas","multiplier","width","height","EPSILON","ARRAY_TYPE","degree","y","i","mat4_exports","__export","add","adjoint","clone","copy","create","determinant","equals","exactEquals","frob","fromQuat","fromQuat2","fromRotation","fromRotationTranslation","fromRotationTranslationScale","fromRotationTranslationScaleOrigin","fromScaling","fromTranslation","fromValues","fromXRotation","fromYRotation","fromZRotation","frustum","getRotation","getScaling","getTranslation","identity","invert","lookAt","mul","multiply","multiplyScalar","multiplyScalarAndAdd","ortho","orthoNO","orthoZO","perspective","perspectiveFromFieldOfView","perspectiveNO","perspectiveZO","rotate","rotateX","rotateY","rotateZ","scale","set","str","sub","subtract","targetTo","translate","transpose","create","out","ARRAY_TYPE","clone","a","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","translate","v","x","y","z","scale","rotate","rad","axis","len","c","t","b12","b20","b21","b22","EPSILON","rotateX","s","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspectiveNO","fovy","aspect","f","perspective","perspectiveZO","perspectiveFromFieldOfView","fov","upTan","downTan","leftTan","rightTan","xScale","yScale","orthoNO","lr","bt","ortho","orthoZO","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","str","frob","add","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","mul","sub","import_loglevel","glContext","getGl","aa","selector","log","import_loglevel","ModelCache","name","model","log","UNIFORM_PREFIX","Light","programInfo","setUniforms","CameraType","Camera","type","mat4_exports","aspectRatio","Instance","renderable","angle","gl","uniforms","viewProjection","programInfo","world","mat4_exports","Primitive","Material","gl","uniforms","programInfo","setBuffersAndAttributes","setUniforms","drawBufferInfo","PrimitiveSphere","radius","subdivisionsH","subdivisionsV","primitives","PrimitiveCube","size","PrimitivePlane","width","height","subdivisionsW","glsl_default","glsl_default","glsl_default","glsl_default","glsl_default","glsl_default","version","ShaderProgram","Context","_Context","gl","ModelCache","light","Light","Camera","log","version","canvasSelector","backgroundColour","getGl","ctx","canvas","phongProg","createProgramInfo","glsl_default","gouraudProg","flatProg","err","now","deltaTime","uniforms","mat4_exports","shaderProg","resizeCanvasToDisplaySize","camMatrix","viewMatrix","projection","viewProjection","instance","modelName","model","Instance","material","radius","subdivisionsH","subdivisionsV","sphere","PrimitiveSphere","width","height","subdivisionsW","plane","PrimitivePlane","size","cube","PrimitiveCube","UNIFORM_PREFIX","Material","_Material","gl","getGl","createTexture","rawMtl","m","r","g","b","url","filter","programInfo","setUniforms","import_loglevel","parseMTL","mtlFile","materials","material","keywords","_","unparsedArgs","parts","keywordRE","lines","lineNo","line","m","keyword","handler","keywordRE","parseOBJ","objFile","lines","objPositions","objTexcoords","objNormals","objVertexData","webglVertexData","geometries","geometry","material","materialLibs","keywords","parts","setGeometry","numTriangles","tri","addVertex","_","unparsedArgs","newGeometry","vert","objIndexStr","i","objIndex","index","position","texcoord","normal","lineNo","line","m","keyword","handler","g","fetchFile","filePath","resp","Model","_Model","name","gl","uniforms","programInfo","part","bufferInfo","setBuffersAndAttributes","setUniforms","drawBufferInfo","path","objFilename","model","objFile","fetchFile","objData","parseOBJ","mtlFile","materialsRawList","parseMTL","matName","matRaw","Material","getGl","g","createBufferInfoFromArrays","ModelPart","log","materialName"]}